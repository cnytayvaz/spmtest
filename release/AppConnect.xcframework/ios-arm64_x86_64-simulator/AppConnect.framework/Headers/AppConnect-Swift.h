#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef APPCONNECT_SWIFT_H
#define APPCONNECT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AppConnect",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSURLSessionTask;
@class NSData;
@class NSURL;

SWIFT_CLASS("_TtC10AppConnect22APCURLSessionCollector")
@interface APCURLSessionCollector : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCURLSessionCollector * _Nonnull shared;)
+ (APCURLSessionCollector * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)startTrackingWithTask:(NSURLSessionTask * _Nonnull)task;
- (void)endTrackingWithTask:(NSURLSessionTask * _Nullable)task data:(NSData * _Nullable)data;
- (void)endTrackingWithUrl:(NSURL * _Nonnull)url data:(NSData * _Nullable)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class NSString;

SWIFT_CLASS_NAMED("APMAttributes")
@interface APCAPMAttributes : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDomain:(NSString * _Nullable)domain OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

@interface APCAPMAttributes (SWIFT_EXTENSION(AppConnect))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
@end

enum ACHTTPMethod : NSInteger;

/// Object that holds http request & response metrics and relevant
/// properties for the purpose of sending to server
SWIFT_CLASS_NAMED("APMHTTPRecord")
@interface APCAPMHTTPRecord : NSObject
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSString * _Nullable errorType;
@property (nonatomic, copy) NSString * _Nullable errorCode;
@property (nonatomic, copy) NSString * _Nullable errorMessage;
/// Object that holds custom attributes
@property (nonatomic, strong) APCAPMAttributes * _Nullable attributes;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url domain:(NSString * _Nullable)domain;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url method:(enum ACHTTPMethod)method statusCode:(NSInteger)statusCode duration:(NSTimeInterval)duration success:(BOOL)success domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_UNAVAILABLE
@interface APCAPMHTTPRecord (SWIFT_EXTENSION(AppConnect))
- (enum ACHTTPMethod)getMethod SWIFT_WARN_UNUSED_RESULT;
- (void)setMethod:(enum ACHTTPMethod)method;
- (NSInteger)getStatusCode SWIFT_WARN_UNUSED_RESULT;
- (void)setStatusCode:(NSInteger)statusCode;
- (NSTimeInterval)getDuration SWIFT_WARN_UNUSED_RESULT;
- (void)setDuration:(NSTimeInterval)duration;
- (BOOL)getSuccess SWIFT_WARN_UNUSED_RESULT;
- (void)setSuccess:(BOOL)success;
@end


SWIFT_CLASS_NAMED("APMMutableHttpRecord")
@interface APCAPMMutableHttpRecord : NSObject
/// Type of error
@property (nonatomic, copy) NSString * _Nullable errorType;
/// Error code
@property (nonatomic, copy) NSString * _Nullable errorCode;
/// Error message
@property (nonatomic, copy) NSString * _Nullable errorMessage;
/// Object that holds custom attributes
@property (nonatomic, strong) APCAPMAttributes * _Nullable attributes;
- (void)setSuccess:(BOOL)isSuccess;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("APMMutableNetworkRecord")
@interface APCAPMMutableNetworkRecord : NSObject
/// Custom message
@property (nonatomic, copy) NSString * _Nullable message;
/// Object that holds custom attributes
@property (nonatomic, strong) APCAPMAttributes * _Nullable attributes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class APCAPMNetworkRecordErrorType;

/// Object that holds network errors and relevant properties
/// for the purpose of sending to server
SWIFT_CLASS_NAMED("APMNetworkRecord")
@interface APCAPMNetworkRecord : NSObject
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable headers;
@property (nonatomic, strong) APCAPMNetworkRecordErrorType * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable exception;
@property (nonatomic, copy) NSString * _Nullable message;
/// Object that holds custom attributes
@property (nonatomic, strong) APCAPMAttributes * _Nullable attributes;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url domain:(NSString * _Nullable)domain;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url method:(enum ACHTTPMethod)method duration:(NSTimeInterval)duration type:(APCAPMNetworkRecordErrorType * _Nonnull)type exception:(NSString * _Nonnull)exception domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSError;

/// Network error types
SWIFT_CLASS_NAMED("ErrorType")
@interface APCAPMNetworkRecordErrorType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCAPMNetworkRecordErrorType * _Nonnull unknown;)
+ (APCAPMNetworkRecordErrorType * _Nonnull)unknown SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCAPMNetworkRecordErrorType * _Nonnull noConnection;)
+ (APCAPMNetworkRecordErrorType * _Nonnull)noConnection SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCAPMNetworkRecordErrorType * _Nonnull ssl;)
+ (APCAPMNetworkRecordErrorType * _Nonnull)ssl SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCAPMNetworkRecordErrorType * _Nonnull timeout;)
+ (APCAPMNetworkRecordErrorType * _Nonnull)timeout SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCAPMNetworkRecordErrorType * _Nonnull insecureConnection;)
+ (APCAPMNetworkRecordErrorType * _Nonnull)insecureConnection SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger rawValue;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)formUnion:(APCAPMNetworkRecordErrorType * _Nonnull)other;
- (void)formIntersection:(APCAPMNetworkRecordErrorType * _Nonnull)other;
- (void)formSymmetricDifference:(APCAPMNetworkRecordErrorType * _Nonnull)other;
/// Initialize network record object
/// \param error Error object
///
- (nullable instancetype)initWithError:(NSError * _Nonnull)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_UNAVAILABLE
@interface APCAPMNetworkRecord (SWIFT_EXTENSION(AppConnect))
- (enum ACHTTPMethod)getMethod SWIFT_WARN_UNUSED_RESULT;
- (void)setMethod:(enum ACHTTPMethod)method;
- (NSTimeInterval)getDuration SWIFT_WARN_UNUSED_RESULT;
- (void)setDuration:(NSTimeInterval)duration;
@end



SWIFT_CLASS_NAMED("Attributes")
@interface APCAttributes : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class APCProduct;

SWIFT_CLASS_NAMED("AddToCardEventAttributes")
@interface APCAddToCardEventAttributes : APCAttributes
/// Initializes add to cart attributes with given product
/// \param product Product that added to cart
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithProduct:(APCProduct * _Nonnull)product domain:(NSString * _Nullable)domain;
/// Adds value attribute to event
/// \param value Value of products
///
///
/// returns:
/// Event builder’s itself
- (APCAddToCardEventAttributes * _Nonnull)addValue:(NSDecimal)value;
/// Adds total cart value attribute to event
/// \param totalCartValue Total cart value
///
///
/// returns:
/// Event builder’s itself
- (APCAddToCardEventAttributes * _Nonnull)addTotalCartValue:(NSDecimal)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("AddToWishListEventAttributes")
@interface APCAddToWishListEventAttributes : APCAttributes
/// Initializes add to wish list attributes with given product
/// \param product Product that added to wish list
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithProduct:(APCProduct * _Nonnull)product domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Configuration object for APM related features
SWIFT_CLASS("_TtC10AppConnect19AppConnectAPMConfig")
@interface AppConnectAPMConfig : NSObject
/// Flag that controls APM collection state
/// default value <code>true</code>
@property (nonatomic) BOOL recordCollectionEnabled;
/// Maximum number of stored records, if there is a connection problem with server
@property (nonatomic) NSInteger recordStorageLimit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Configuration object for application inbox related features
SWIFT_CLASS("_TtC10AppConnect24AppConnectAppInboxConfig")
@interface AppConnectAppInboxConfig : NSObject
/// Flag that controls App Inbox feature state
/// default value <code>false</code>
@property (nonatomic) BOOL isEnabled;
/// Default count limit for stored messages, defaults to 5000
@property (nonatomic) NSInteger storageLimit;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AutoCollectingComponentConfig;
@class AutoCollectingGestureConfig;
@class AutoCollectingAPMConfig;

/// Configuration object for auto-collecting related features
SWIFT_CLASS("_TtC10AppConnect30AppConnectAutoCollectingConfig")
@interface AppConnectAutoCollectingConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable domain;
/// Auto collecting UI components config
@property (nonatomic, readonly, strong) AutoCollectingComponentConfig * _Nonnull component;
/// Auto collecting gesture event config
@property (nonatomic, readonly, strong) AutoCollectingGestureConfig * _Null_unspecified gesture;
/// Auto collecting APM config
@property (nonatomic, readonly, strong) AutoCollectingAPMConfig * _Null_unspecified apm;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol AppConnectEventListenerDelegate;
@protocol APCInAppMessageListener;
@protocol APCInAppMessageAlertTapListener;
@protocol APCInAppMessageAlertDeeplinkHandler;
@protocol APCAutoCollectionApmListener;
@protocol APCScreenTracker;
@class APCAppListener;
@class APCPushEventManager;
@class AppConnectConfig;
@class APCAppInbox;

/// Root object for AppConnect SDK, all features should be used through the client instance
SWIFT_CLASS("_TtC10AppConnect16AppConnectClient")
@interface AppConnectClient : NSObject
/// Delegate object to notify when fired events
@property (nonatomic, weak) id <AppConnectEventListenerDelegate> _Nullable eventListenerDelegate;
/// Delegate object to notify when in-app message received
@property (nonatomic, weak) id <APCInAppMessageListener> _Nullable inAppMessageListenerDelegate;
/// Delegate object to notify when in-app message alert interactions occured
@property (nonatomic, weak) id <APCInAppMessageAlertTapListener> _Nullable alertTapListenerDelegate;
/// Delegate object to notify when in-app message deeplink needs to be handled
@property (nonatomic, weak) id <APCInAppMessageAlertDeeplinkHandler> _Nullable alertDeeplinkHandlerDelegate;
@property (nonatomic, weak) id <APCAutoCollectionApmListener> _Nullable autoCollectingApmListenerDelegate;
/// Screen tracking module
@property (nonatomic, readonly, strong) id <APCScreenTracker> _Nonnull screenTracker;
@property (nonatomic, readonly, strong) APCAppListener * _Nonnull listener;
@property (nonatomic, readonly, strong) APCPushEventManager * _Null_unspecified pushEventManager;
@property (nonatomic, readonly, strong) AppConnectConfig * _Nonnull config;
@property (nonatomic, readonly, strong) APCAppInbox * _Nullable inbox;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AppConnectClient (SWIFT_EXTENSION(AppConnect))
/// Creates an AppConnectClient instance with provided configuration
/// \param config Configuration instance for SDK settings
///
+ (AppConnectClient * _Nullable)initializeWithConfig:(AppConnectConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
@end


@interface AppConnectClient (SWIFT_EXTENSION(AppConnect))
/// Collects an event for language update
/// \param languageCode Language code for the application
///
- (void)updateLanguageWithLanguageCode:(NSString * _Nonnull)languageCode;
@end


@interface AppConnectClient (SWIFT_EXTENSION(AppConnect))
/// Enables geofencing functionality
/// This function should be called after gathering location permission
- (void)enableGeofencing;
/// Disables geofencing functionality
- (void)disableGeofencing;
@end



@class AppConnectUser;
@class APCUserAttributes;

@interface AppConnectClient (SWIFT_EXTENSION(AppConnect))
/// Sets active user of the application
/// \param user User object that contains any details about current user
///
- (void)setUser:(AppConnectUser * _Nonnull)user;
/// Updates information for active user
/// \param attributes UserAttributes object to pass custom data
///
- (void)updateUserWithAttributes:(APCUserAttributes * _Nonnull)attributes;
/// Clears previously set user
- (void)clearUser;
/// Device identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
///
/// returns:
/// DeviceProperty string
- (NSString * _Nullable)devicePropertyString SWIFT_WARN_UNUSED_RESULT;
- (void)collectAPMHTTPRecord:(APCAPMHTTPRecord * _Nonnull)record;
- (void)collectAPMNetworkRecord:(APCAPMNetworkRecord * _Nonnull)record;
@end


@interface AppConnectClient (SWIFT_EXTENSION(AppConnect))
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key intValue:(NSInteger)intValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key doubleValue:(double)doubleValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key int64Value:(int64_t)int64Value;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key floatValue:(float)floatValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key boolValue:(BOOL)boolValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key dateValue:(NSDate * _Nonnull)dateValue;
- (BOOL)clearSuperAttributeWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


@interface AppConnectClient (SWIFT_EXTENSION(AppConnect))
- (void)setCountry:(NSString * _Nonnull)country;
- (void)setContinent:(NSString * _Nonnull)continent;
- (void)setCity:(NSString * _Nonnull)city;
- (void)setRegion:(NSString * _Nonnull)region;
- (void)updateCoordinatesWithLatitude:(double)latitude longitude:(double)longitude;
- (void)clearCountry;
- (void)clearContinent;
- (void)clearCity;
- (void)clearRegion;
- (void)clearCoordinates;
@end

@class AppConnectPushConfig;
@class AppConnectScreenTrackingConfig;
@class AppConnectInAppMessagingConfig;
@class APCLoggerConfig;
@class APCNetworkConfig;
@class AppConnectSnapshotConfig;
@class APCAppConnectDatabaseConfig;

/// Configuration class for AppConnectClient
SWIFT_CLASS("_TtC10AppConnect16AppConnectConfig")
@interface AppConnectConfig : NSObject
/// Key for AppConnect SDK
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkKey;
/// Endpoint for AppConnect server
@property (nonatomic, readonly, copy) NSString * _Nonnull serverURL;
/// Domain name for the multiple instances
@property (nonatomic, readonly, copy) NSString * _Nullable domain;
/// Migrate databse before multiple instance support into this domain.
/// This field should be set before client initialization. Defaults to <code>false</code>
@property (nonatomic) BOOL multipleInstanceMigrationEnabled;
/// Flag that controls collection of events
/// If there is a paused session already functioned by <code>AppConnectConfig.pauseEventCollection()</code>
/// This function ignores the paused session, disgards it and starts control collection of events
/// Defaults to <code>false</code>
@property (nonatomic) BOOL eventCollectingDisabled;
/// Maximum number of stored events, if there is a connection problem with server
@property (nonatomic) NSInteger eventStorageLimit;
/// Default timeout period of a session
@property (nonatomic) NSTimeInterval sessionDropDuration;
/// Deletes the storage database. This field should be set before client initialization.
@property (nonatomic) BOOL resetDatabase;
/// Configuration object instance for push notifications feature
@property (nonatomic, readonly, strong) AppConnectPushConfig * _Nonnull push;
/// Configuration object instance for screen tracking related features
@property (nonatomic, readonly, strong) AppConnectScreenTrackingConfig * _Nonnull screenTracking;
/// Configuration object instance for APM related features
@property (nonatomic, readonly, strong) AppConnectAPMConfig * _Nonnull apm;
/// Configuration object instance for in-app messaging related features
@property (nonatomic, readonly, strong) AppConnectInAppMessagingConfig * _Nonnull inApp;
/// Configuration object instance for logger
@property (nonatomic, readonly, strong) APCLoggerConfig * _Nonnull logger;
/// Configuration object instance for networking
@property (nonatomic, readonly, strong) APCNetworkConfig * _Nonnull network;
/// Configuration object instance for networking
@property (nonatomic, readonly, strong) AppConnectSnapshotConfig * _Nonnull snapshot;
/// Configuration object instance for App Inbox feature
@property (nonatomic, readonly, strong) AppConnectAppInboxConfig * _Null_unspecified appInbox;
/// App group identifier for shared container
@property (nonatomic, copy) NSString * _Nullable appGroupIdentifier;
/// Configuration object instance for auto collecting
@property (nonatomic, readonly, strong) AppConnectAutoCollectingConfig * _Nonnull autoCollecting;
/// Array of event names listened by host application
@property (nonatomic, copy) NSArray<NSString *> * _Nullable eventsToListen;
/// Identifier for only plugins
@property (nonatomic, copy) NSString * _Nullable frameworkIdentifier;
/// encryption key for database
@property (nonatomic, readonly, strong) APCAppConnectDatabaseConfig * _Nonnull databaseConfig;
/// Language code for the application, should be updated upon language changes
@property (nonatomic, readonly, copy) NSString * _Nonnull languageCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes configuration instance
/// \param sdkKey Key for AppConnect SDK
///
/// \param serverURL Endpoint for AppConnect server
///
/// \param languageCode Language code for the host applications active language. For exp: “tr”, “en”
///
/// \param domain domain name for multiple instances
///
- (nonnull instancetype)initWithSdkKey:(NSString * _Nonnull)sdkKey serverURL:(NSString * _Nonnull)serverURL languageCode:(NSString * _Nonnull)languageCode domain:(NSString * _Nullable)domain;
/// Initializes configuration instance
/// \param sdkKey Key for AppConnect SDK
///
/// \param serverURL Endpoint for AppConnect server
///
/// \param languageCode Language code for the host applications active language. For exp: “tr”, “en”
///
/// \param domain domain name for multiple instances
///
- (nonnull instancetype)initWithSdkKey:(NSString * _Nonnull)sdkKey serverURL:(NSString * _Nonnull)serverURL languageCode:(NSString * _Nonnull)languageCode databaseConfig:(APCAppConnectDatabaseConfig * _Nullable)databaseConfig domain:(NSString * _Nullable)domain OBJC_DESIGNATED_INITIALIZER;
@end


@interface AppConnectConfig (SWIFT_EXTENSION(AppConnect))
@end

@class APCTrustPolicy;

/// Configuration object for network features
SWIFT_CLASS_NAMED("NetworkConfig")
@interface APCNetworkConfig : NSObject
/// Trust policies for network managers
/// important:
/// You can’t set or reset the value after SDK has been initialized, this will cause a crash!
@property (nonatomic, copy) NSArray<APCTrustPolicy *> * _Nullable trustPolicies;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AppConnectConfig (SWIFT_EXTENSION(AppConnect))
/// Pauses event collection
/// This function is handy when current session may not terminated but paused
/// If <code>AppConnectConfig.eventCollectionDisabled</code> is true, this function has no effect
- (void)pauseEventCollection;
/// Resumes event collection
/// Resumes event collection of paused session
/// If <code>AppConnectConfig.eventCollectionDisabled</code> is false his function has no effect
- (void)resumeEventCollection;
@end




SWIFT_CLASS_NAMED("AppConnectDatabaseConfig")
@interface APCAppConnectDatabaseConfig : NSObject
- (nonnull instancetype)initWithDatabaseEncryptionKey:(NSArray<NSNumber *> * _Nullable)databaseEncryptionKey databaseEncryptionEnabled:(BOOL)databaseEncryptionEnabled OBJC_DESIGNATED_INITIALIZER;
- (void)migrateToRawKeyFrom:(NSString * _Nonnull)previousDatabaseEncryptionKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP10AppConnect31AppConnectEventListenerDelegate_")
@protocol AppConnectEventListenerDelegate
/// Method that will be invoked when a new event is fired
/// \param attributes Attributes of fired event
///
- (void)firedEventWithAttributes:(NSDictionary<NSString *, id> * _Nullable)attributes;
@end


/// Configuration object for in-app messaging related features
SWIFT_CLASS("_TtC10AppConnect30AppConnectInAppMessagingConfig")
@interface AppConnectInAppMessagingConfig : NSObject
/// Flag that controls in-app messaging enabled or not
@property (nonatomic) BOOL inAppMessagingEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Configuration object for push notifications feature
SWIFT_CLASS("_TtC10AppConnect20AppConnectPushConfig")
@interface AppConnectPushConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10AppConnect23AppConnectReservedEvent")
@interface AppConnectReservedEvent : NSObject
/// Avoid initialization
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Event name for screen tracking start event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewTrackingStart;)
+ (NSString * _Nonnull)viewTrackingStart SWIFT_WARN_UNUSED_RESULT;
/// Event name for screen tracking stop event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewTrackingStop;)
+ (NSString * _Nonnull)viewTrackingStop SWIFT_WARN_UNUSED_RESULT;
/// Event name for push token update event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pushTokenUpdate;)
+ (NSString * _Nonnull)pushTokenUpdate SWIFT_WARN_UNUSED_RESULT;
/// Event name for language update event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull languageUpdate;)
+ (NSString * _Nonnull)languageUpdate SWIFT_WARN_UNUSED_RESULT;
/// Event name for user information update event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userUpdate;)
+ (NSString * _Nonnull)userUpdate SWIFT_WARN_UNUSED_RESULT;
/// Event name for session start event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sessionStart;)
+ (NSString * _Nonnull)sessionStart SWIFT_WARN_UNUSED_RESULT;
/// Event name for session stop event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sessionStop;)
+ (NSString * _Nonnull)sessionStop SWIFT_WARN_UNUSED_RESULT;
/// Event name for notification open event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationOpen;)
+ (NSString * _Nonnull)notificationOpen SWIFT_WARN_UNUSED_RESULT;
/// Event name for notification received event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationReceive;)
+ (NSString * _Nonnull)notificationReceive SWIFT_WARN_UNUSED_RESULT;
/// Event name for goal achieved event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull goalAchieved;)
+ (NSString * _Nonnull)goalAchieved SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message button click event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageButtonClick;)
+ (NSString * _Nonnull)inAppMessageButtonClick SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message read, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageRead;)
+ (NSString * _Nonnull)inAppMessageRead SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message close, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageClose;)
+ (NSString * _Nonnull)inAppMessageClose SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message fetched
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageFetched;)
+ (NSString * _Nonnull)inAppMessageFetched SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s first opening, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkFirstOpen;)
+ (NSString * _Nonnull)sdkFirstOpen SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s device update settings event, shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceUpdateSettings;)
+ (NSString * _Nonnull)deviceUpdateSettings SWIFT_WARN_UNUSED_RESULT;
/// Event name for APM network errors, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull apmNetworkError;)
+ (NSString * _Nonnull)apmNetworkError SWIFT_WARN_UNUSED_RESULT;
/// Event name for APM http events, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull apmHTTPCall;)
+ (NSString * _Nonnull)apmHTTPCall SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s add to cart commerce event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addToCart;)
+ (NSString * _Nonnull)addToCart SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that user completes a purchase,
/// shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchase;)
+ (NSString * _Nonnull)purchase SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s search commerce event, shouldn’t be used manually
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull search;)
+ (NSString * _Nonnull)search SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s view product commerce event
/// that whenever a single product is displayed, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewProduct;)
+ (NSString * _Nonnull)viewProduct SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that user lists items within a specific category,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewCategory;)
+ (NSString * _Nonnull)viewCategory SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that removing item(s) from cart,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull removeFromCart;)
+ (NSString * _Nonnull)removeFromCart SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that user removes all items from cart,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clearCart;)
+ (NSString * _Nonnull)clearCart SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event for initiating a checkout/payment process,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull startCheckout;)
+ (NSString * _Nonnull)startCheckout SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event
/// that not being able to go to the next step in the checkout funnel,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorCheckout;)
+ (NSString * _Nonnull)errorCheckout SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event
/// that adding an item to wish list,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addToWishList;)
+ (NSString * _Nonnull)addToWishList SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that remove an item from wish list,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull removeFromWishList;)
+ (NSString * _Nonnull)removeFromWishList SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s deeplink launched event that is for used tracking referrals for deeplinks.
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deeplinkLaunched;)
+ (NSString * _Nonnull)deeplinkLaunched SWIFT_WARN_UNUSED_RESULT;
/// UIButton <code>touchUpInside</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull buttonClick;)
+ (NSString * _Nonnull)buttonClick SWIFT_WARN_UNUSED_RESULT;
/// UISwitch <code>valueChanged</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull toggleChange;)
+ (NSString * _Nonnull)toggleChange SWIFT_WARN_UNUSED_RESULT;
/// UITextField and UITextView <code>textDidEndEditing</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull textChange;)
+ (NSString * _Nonnull)textChange SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>tap</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull touch;)
+ (NSString * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>swipe</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swipe;)
+ (NSString * _Nonnull)swipe SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>long press</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull longPress;)
+ (NSString * _Nonnull)longPress SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>double tap</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull doubleTap;)
+ (NSString * _Nonnull)doubleTap SWIFT_WARN_UNUSED_RESULT;
/// Set of all reserved events, can be used for checking name collisions
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSSet<NSString *> * _Nonnull reservedEvents;)
+ (NSSet<NSString *> * _Nonnull)reservedEvents SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration object for screen tracking features
SWIFT_CLASS("_TtC10AppConnect30AppConnectScreenTrackingConfig")
@interface AppConnectScreenTrackingConfig : NSObject
/// Flag that indicates screen tracking enabled or not,
/// default value <code>true</code>
@property (nonatomic) BOOL enabled;
/// Flag for auto screen tracking state,
/// default value <code>true</code>
@property (nonatomic) BOOL autoTrackingEnabled;
/// Flag for tracking inner most or the outer most view controller,
/// Default value <code>false</code>
@property (nonatomic) BOOL shouldTrackInnerViewController;
/// A set of excluded view controllers
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull viewControllerExclusions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Interface for view/view controllers, that needs to configure screen tracking
SWIFT_PROTOCOL("_TtP10AppConnect36AppConnectScreenTrackingConfigurator_")
@protocol AppConnectScreenTrackingConfigurator <NSObject>
/// Auto screen tracking name for the object
@property (nonatomic, readonly, copy) NSString * _Nonnull apc_screenTrackingName;
@end


/// Interface for defining screen tracking exclusions
SWIFT_PROTOCOL("_TtP10AppConnect33AppConnectScreenTrackingExclusion_")
@protocol AppConnectScreenTrackingExclusion <NSObject>
/// Flag that indicates, if current screen should be an exclusion from screen tracking
@property (nonatomic, readonly) BOOL apc_isAutoScreenTrackingExclusion;
@end


/// Configuration object for snapshotting feature.
/// warning:
/// <em>Snapshot collection should never be enabled for store distribution releases.</em>
SWIFT_CLASS("_TtC10AppConnect24AppConnectSnapshotConfig")
@interface AppConnectSnapshotConfig : NSObject
/// Enables capturing snapshots of tracked screens.
/// warning:
/// Since screens can contain sensitive user information,
/// <em>should never be used in store distribution releases</em>.
/// warning:
/// Will be ineffective unless <em>enabledBundleIds</em> property is set correctly.
@property (nonatomic) BOOL recordingEnabled;
@property (nonatomic) NSInteger latencyInMillis;
/// Bundle identifiers that can enable snapshot capturing.
/// warning:
/// Your app store distribution bundle id <em>must not</em> be in this list.
/// warning:
/// It is strongly encouraged to consider setting value of this parameter as a
/// compile-time constant string like <code>com.commencis.connect.debug</code>, instead of a run-time
/// value like<code>Bundle.main.bundleIdentifier</code>. Since <code>Bundle.main.bundleIdentifier</code> will
/// return identifier of current bundle regardless of environment the build is running on.
/// Thus this parameter won’t provide any safety at all.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable enabledBundleIDs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class APCCertificate;

SWIFT_CLASS_NAMED("AppConnectTrustPolicy")
@interface APCTrustPolicy : NSObject
- (nonnull instancetype)initWithEvaluationDisabledPolicyWithEndpoint:(NSString * _Nonnull)endpoint certificates:(NSArray<APCCertificate *> * _Nonnull)certificates;
- (nonnull instancetype)initWithEndpoint:(NSString * _Nonnull)endpoint certificates:(NSArray<APCCertificate *> * _Nonnull)certificates evaluationDisabled:(BOOL)evaluationDisabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum APCGender : NSInteger;

/// Object that contains any information related to active user
SWIFT_CLASS("_TtC10AppConnect14AppConnectUser")
@interface AppConnectUser : NSObject
/// Primary identifier of the user
@property (nonatomic, readonly, copy) NSString * _Nonnull customerId;
/// Email address of the user
@property (nonatomic, copy) NSString * _Nullable email;
/// Phone number of the user, same formatting should be used.
@property (nonatomic, copy) NSString * _Nullable phone;
/// National identity number of the user
@property (nonatomic, copy) NSString * _Nullable nationalId;
/// First name of the user
@property (nonatomic, copy) NSString * _Nullable firstName;
/// Last name of the user
@property (nonatomic, copy) NSString * _Nullable lastName;
/// Gender of the user
@property (nonatomic) enum APCGender gender;
/// Date of birth of the user
@property (nonatomic, copy) NSDate * _Nullable dateOfBirth;
/// User attributes to pass custom data to user object
@property (nonatomic, strong) APCUserAttributes * _Nullable attributes;
/// Creates an instance of user object
/// \param customerId Primary identifier for user, shouldn’t be empty.
///
- (nonnull instancetype)initWithCustomerId:(NSString * _Nonnull)customerId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@protocol APCAppInboxDelegate;
@class APCInboxMessage;
@class APCAppInboxQuery;

SWIFT_CLASS_NAMED("AppInbox")
@interface APCAppInbox : NSObject
/// App Inbox delegate
@property (nonatomic, weak) id <APCAppInboxDelegate> _Nullable delegate;
/// Fetchs stored inbox messages from database
- (NSArray<APCInboxMessage *> * _Nullable)fetchMessages SWIFT_WARN_UNUSED_RESULT;
/// Fetchs stored inbox messages from database with query
/// \param query Query for messages
///
- (NSArray<APCInboxMessage *> * _Nullable)fetchMessagesWithQuery:(APCAppInboxQuery * _Nullable)query SWIFT_WARN_UNUSED_RESULT;
/// Deletes inbox messages from database
/// \param ids Message identifiers
///
- (BOOL)deleteMessagesWithIds:(NSArray<NSNumber *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Reads inbox messages from database
/// \param ids Message identifiers
///
- (BOOL)readMessagesWithIds:(NSArray<NSNumber *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Interface for handling inbox events
SWIFT_PROTOCOL_NAMED("AppInboxDelegate")
@protocol APCAppInboxDelegate
/// Called when a message is updated
/// \param inbox App inbox
///
/// \param message Updated message
///
- (void)inbox:(APCAppInbox * _Nonnull)inbox didUpdate:(APCInboxMessage * _Nonnull)message;
/// Called when messages are removed from inbox
/// \param inbox App Inbox
///
/// \param ids Removed message identifiers
///
- (void)inbox:(APCAppInbox * _Nonnull)inbox didDeleteMessages:(NSArray<NSNumber *> * _Nonnull)ids;
@end

enum APCInboxMessageType : NSInteger;
enum APCInboxMessageStatus : NSInteger;

SWIFT_CLASS_NAMED("AppInboxQuery")
@interface APCAppInboxQuery : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (APCAppInboxQuery * _Nonnull)messageType:(enum APCInboxMessageType)messageType SWIFT_WARN_UNUSED_RESULT;
- (APCAppInboxQuery * _Nonnull)status:(enum APCInboxMessageStatus)status SWIFT_WARN_UNUSED_RESULT;
- (APCAppInboxQuery * _Nonnull)from:(NSDate * _Nonnull)from SWIFT_WARN_UNUSED_RESULT;
- (APCAppInboxQuery * _Nonnull)to:(NSDate * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
- (APCAppInboxQuery * _Nonnull)anonymous:(BOOL)anonymous SWIFT_WARN_UNUSED_RESULT;
@end

@class UNNotification;

/// Class that listens application state changes and notifies AppConnect SDK
SWIFT_CLASS_NAMED("AppListener")
@interface APCAppListener : NSObject
/// Notifies the SDK about application finished launching
/// \param launchOptions Application launch options
///
- (void)appDidFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
/// Notifies the SDK about remote notification registration
/// \param tokenData Device token for remote notifications
///
- (void)appDidRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)tokenData;
/// Notifies the SDK upon reciveing remote notifications
/// \param userInfo User info dictionary for the notification
///
- (void)appDidReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo handleAction:(BOOL)handleAction;
/// Notifies the SDK upon reciveing local notifications when app is foreground
/// \param notification UNNotification
///
- (void)appWillPresentNotification:(UNNotification * _Nonnull)notification;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class NSNumber;

@interface APCAttributes (SWIFT_EXTENSION(AppConnect))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addNumber:(NSNumber * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (void)collect;
@end


/// Auto collect configuration for APM
SWIFT_CLASS("_TtC10AppConnect23AutoCollectingAPMConfig")
@interface AutoCollectingAPMConfig : NSObject
/// Flags that controls auto collecting on apm events.
/// Default value <code>true</code>
@property (nonatomic) BOOL isEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AutoCollectingAPMConfig (SWIFT_EXTENSION(AppConnect))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL apmEnabled;)
+ (BOOL)apmEnabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL apmSwizzlingEnabled;)
+ (BOOL)apmSwizzlingEnabled SWIFT_WARN_UNUSED_RESULT;
@end



/// Interface to change apm records before event submission
SWIFT_PROTOCOL_NAMED("AutoCollectingApmListener")
@protocol APCAutoCollectionApmListener
@optional
/// Delegate method that will be invoked before sending event
/// \param record APMHTTPRecord object
///
- (APCAPMMutableHttpRecord * _Nonnull)willCollectHttpRecordWithRecord:(APCAPMHTTPRecord * _Nonnull)record SWIFT_WARN_UNUSED_RESULT;
/// Delegate method that will be invoked before sending event
/// \param record APMNetworkRecord object
///
- (APCAPMMutableNetworkRecord * _Nonnull)willCollectNetworkRecordWithRecord:(APCAPMNetworkRecord * _Nonnull)record SWIFT_WARN_UNUSED_RESULT;
@end


/// Auto collect configuration for UI component events
SWIFT_CLASS("_TtC10AppConnect29AutoCollectingComponentConfig")
@interface AutoCollectingComponentConfig : NSObject
/// Flags that controls auto collecting on components such as UIButton, USwitch etc.
/// Default value <code>true</code>
@property (nonatomic) BOOL isEnabled;
/// Threshold value for ButtonClick events
/// Default value <code>0</code>
@property (nonatomic) NSInteger debounceThreshold;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Auto collect configuration for gesture events
SWIFT_CLASS("_TtC10AppConnect27AutoCollectingGestureConfig")
@interface AutoCollectingGestureConfig : NSObject
/// Flags that controls auto collecting on gesture events
/// Default value <code>false</code>
@property (nonatomic) BOOL isEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("UIEventTrackingAttributes")
@interface APCUIEventTrackingAttributes : NSObject
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIButton;
@class APCUIViewPixelCoordinate;

SWIFT_CLASS_NAMED("ButtonTrackingAttributes")
@interface APCButtonTrackingAttributes : APCUIEventTrackingAttributes
/// Initialize ButtonTrackingAttributes
/// \param button button to track
///
- (nonnull instancetype)initWithButton:(UIButton * _Nonnull)button OBJC_DESIGNATED_INITIALIZER;
/// Initialize ButtonTrackingAttributes
/// \param className className for button (e.g. “UIButton”)
///
/// \param label label for button (e.g. button.title)
///
/// \param accessibilityLabel accessibilityLabel for button
///
/// \param componentId componentId for button
///
/// \param coordinates coordinates for button. (e.g. button.frame)
///
/// \param viewLabel viewLabel for button’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for button’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithClassName:(NSString * _Nonnull)className label:(NSString * _Nullable)label accessibilityLabel:(NSString * _Nullable)accessibilityLabel componentId:(NSString * _Nullable)componentId coordinates:(APCUIViewPixelCoordinate * _Nullable)coordinates viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end

@class APCCertificateFile;

SWIFT_CLASS_NAMED("Certificate")
@interface APCCertificate : NSObject
+ (APCCertificate * _Nonnull)file:(APCCertificateFile * _Nonnull)file SWIFT_WARN_UNUSED_RESULT;
+ (APCCertificate * _Nonnull)base64:(NSString * _Nonnull)encodedString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSBundle;

SWIFT_CLASS_NAMED("CertificateFile")
@interface APCCertificateFile : NSObject
- (nonnull instancetype)initWithBundle:(NSBundle * _Nonnull)bundle fileName:(NSString * _Nonnull)fileName fileExtension:(NSString * _Nonnull)fileExtension OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ClearCartEventAttributes")
@interface APCClearCartEventAttributes : APCAttributes
/// Initializes event object
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithDomain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ConnectionType")
@interface APCNetworkConnectionType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull none;)
+ (APCNetworkConnectionType * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull cellular;)
+ (APCNetworkConnectionType * _Nonnull)cellular SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull wifi;)
+ (APCNetworkConnectionType * _Nonnull)wifi SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull ethernet;)
+ (APCNetworkConnectionType * _Nonnull)ethernet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull bluetooth;)
+ (APCNetworkConnectionType * _Nonnull)bluetooth SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull wifiAware;)
+ (APCNetworkConnectionType * _Nonnull)wifiAware SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull loWpan;)
+ (APCNetworkConnectionType * _Nonnull)loWpan SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull vpn;)
+ (APCNetworkConnectionType * _Nonnull)vpn SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger rawValue;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)formUnion:(APCNetworkConnectionType * _Nonnull)other;
- (void)formIntersection:(APCNetworkConnectionType * _Nonnull)other;
- (void)formSymmetricDifference:(APCNetworkConnectionType * _Nonnull)other;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



SWIFT_CLASS_NAMED("CustomEventBuilder")
@interface APCCustomEventBuilder : NSObject
- (nonnull instancetype)initWithDomain:(NSString * _Nullable)domain eventName:(NSString * _Nonnull)eventName OBJC_DESIGNATED_INITIALIZER;
- (APCCustomEventBuilder * _Nonnull)addAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
- (APCCustomEventBuilder * _Nonnull)addDate:(NSDate * _Nonnull)date key:(NSString * _Nonnull)key;
- (APCCustomEventBuilder * _Nonnull)addBoolean:(BOOL)boolean key:(NSString * _Nonnull)key;
- (APCCustomEventBuilder * _Nonnull)addNumber:(NSNumber * _Nonnull)number key:(NSString * _Nonnull)key;
- (APCCustomEventBuilder * _Nonnull)addString:(NSString * _Nonnull)string key:(NSString * _Nonnull)key;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("DBAPMRecord")
@interface DBAPMRecord : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@interface DBAPMRecord (SWIFT_EXTENSION(AppConnect))
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBActionBased")
@interface DBActionBased : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@interface DBActionBased (SWIFT_EXTENSION(AppConnect))
@property (nonatomic, copy) NSDate * _Nullable date;
@property (nonatomic) BOOL delivered;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable parentId;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBEvent")
@interface DBEvent : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@interface DBEvent (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) int64_t id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBGeofence")
@interface DBGeofence : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface DBGeofence (SWIFT_EXTENSION(AppConnect))
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBGoal")
@interface DBGoal : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@interface DBGoal (SWIFT_EXTENSION(AppConnect))
@property (nonatomic, copy) NSString * _Nullable eventName;
@property (nonatomic, copy) NSDate * _Nullable expDate;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBInboxMessage")
@interface DBInboxMessage : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@interface DBInboxMessage (SWIFT_EXTENSION(AppConnect))
@property (nonatomic, copy) NSString * _Nullable customerId;
@property (nonatomic, copy) NSDate * _Nullable expirationDate;
@property (nonatomic) int64_t id;
@property (nonatomic, copy) NSString * _Nullable payload;
@property (nonatomic, copy) NSString * _Nullable pushId;
@property (nonatomic, copy) NSDate * _Nullable receivedDate;
@property (nonatomic, copy) NSString * _Nullable scheduleId;
@property (nonatomic) int16_t status;
@property (nonatomic) int16_t type;
@end


SWIFT_CLASS_NAMED("DBSession")
@interface DBSession : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface DBSession (SWIFT_EXTENSION(AppConnect))
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


/// Event attributes for deeplink launched event that user opens application with deeplink
SWIFT_CLASS_NAMED("DeeplinkAttributes")
@interface APCDeeplinkAttributes : NSObject
/// Initialize deep link attributes
/// \param url Deep link url parameter
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url domain:(NSString * _Nullable)domain OBJC_DESIGNATED_INITIALIZER;
/// Initialize deep link attributes
/// \param url Deep link url parameter
///
/// \param options Deep link options
///
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options domain:(NSString * _Nullable)domain OBJC_DESIGNATED_INITIALIZER;
/// Collects event
- (void)collect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface APCDeeplinkAttributes (SWIFT_EXTENSION(AppConnect))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
@end

@class APCTouchPoint;

SWIFT_CLASS_NAMED("TapTrackingAttributes")
@interface APCTapTrackingAttributes : APCUIEventTrackingAttributes
/// Initialize TapTrackingAttributes
/// \param touchPoint touchPoint
///
/// \param viewLabel viewLabel for touch’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for touch’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithTouchPoint:(APCTouchPoint * _Nonnull)touchPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("DoubleTapTrackingAttributes")
@interface APCDoubleTapTrackingAttributes : APCTapTrackingAttributes
- (nonnull instancetype)initWithTouchPoint:(APCTouchPoint * _Nonnull)touchPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, APCGender, "Gender", open) {
  APCGenderUndefined = 0,
  APCGenderMale = 1,
  APCGenderFemale = 2,
  APCGenderNonBinary = 3,
  APCGenderUnknown = 4,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ACHTTPMethod, "HTTPMethod", open) {
  ACHTTPMethodGET = 0,
  ACHTTPMethodHEAD = 1,
  ACHTTPMethodPOST = 2,
  ACHTTPMethodPUT = 3,
  ACHTTPMethodDELETE = 4,
  ACHTTPMethodCONNECT = 5,
  ACHTTPMethodOPTIONS = 6,
  ACHTTPMethodTRACE = 7,
  ACHTTPMethodPATCH = 8,
};

/// Action type enum for in-app message actions
/// <ul>
///   <li>
///     dismiss: Just dismissing the alert
///   </li>
///   <li>
///     gotoUrl: Opening a url
///   </li>
///   <li>
///     gotoDeeplink: Opening a custom deeplink
///   </li>
///   <li>
///     copy: Copying the provided text
///   </li>
///   <li>
///     custom: Custom handling
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, APCInAppMessageActionType, "InAppMessageActionType", open) {
  APCInAppMessageActionTypeDismiss = 0,
  APCInAppMessageActionTypeGotoUrl = 1,
  APCInAppMessageActionTypeGotoDeeplink = 2,
  APCInAppMessageActionTypeCopy = 3,
  APCInAppMessageActionTypeCustom = 4,
};


/// Interface for handling deeplinks for in-app mesages alerts
SWIFT_PROTOCOL_NAMED("InAppMessageAlertDeeplinkHandler")
@protocol APCInAppMessageAlertDeeplinkHandler
/// Delegate method that will be invoked when a button deeplink action is implemented
/// \param deeplink String that identifies the deeplink
///
- (void)shouldHandleDeeplinkWithDeeplink:(NSString * _Nullable)deeplink;
@end

@class APCInAppMessageButton;
@class APCInAppMessageContent;
@class APCInAppMessageCustomContent;

/// Interface for listening tap events on in-app message alerts
SWIFT_PROTOCOL_NAMED("InAppMessageAlertTapListener")
@protocol APCInAppMessageAlertTapListener
@optional
/// Delegate method that will be invoked when a custom handled alert button tapped on in-app message alert
/// \param button Button that is tapped
///
/// \param content Related in-app message content
///
- (void)didTapAlertWithButton:(APCInAppMessageButton * _Nonnull)button content:(APCInAppMessageContent * _Nonnull)content;
/// Delegate method that will be invoked when a custom handled button tapped on custom in-app
/// \param button Button that is tapped
///
/// \param content Related in-app message content
///
- (void)didTapCustomButtonWithButton:(APCInAppMessageButton * _Nonnull)button content:(APCInAppMessageCustomContent * _Nonnull)content;
@end


SWIFT_CLASS_NAMED("InAppMessageAttributeCondition")
@interface APCInAppMessageAttributeCondition : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull values;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("InAppMessageButton")
@interface APCInAppMessageButton : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable actionURI;
@property (nonatomic, readonly, copy) NSString * _Nullable buttonId;
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable textToCopy;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("InAppMessageContent")
@interface APCInAppMessageContent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, copy) NSString * _Nullable language;
@property (nonatomic, readonly, copy) NSArray<APCInAppMessageButton *> * _Nullable buttons;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum APCInAppMessageLocation : NSInteger;

SWIFT_CLASS_NAMED("InAppMessageCustomContent")
@interface APCInAppMessageCustomContent : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull language;
@property (nonatomic, readonly) enum APCInAppMessageLocation location;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, APCInAppMessageDisplayFrequency, "InAppMessageDisplayFrequency", open) {
  APCInAppMessageDisplayFrequencyOncePerEvent = 0,
  APCInAppMessageDisplayFrequencyOncePerSession = 1,
  APCInAppMessageDisplayFrequencyEveryTime = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, APCInAppMessageHorizontalLocation, "InAppMessageHorizontalLocation", open) {
  APCInAppMessageHorizontalLocationRight = 0,
  APCInAppMessageHorizontalLocationCenter = 1,
  APCInAppMessageHorizontalLocationLeft = 2,
};


/// Interface for the objects that listen received in-app messages
SWIFT_PROTOCOL_NAMED("InAppMessageListener")
@protocol APCInAppMessageListener
@optional
/// Delegate method that will be invoked when in-app message received
/// \param content Content of the in-app message
///
- (void)didReceiveInAppMessageWithContent:(APCInAppMessageContent * _Nonnull)content;
/// Delegate method that will be invoked when custom in-app message received
/// \param content Content of the custom in-app message
///
- (void)didReceiveCustomInAppMessageWithContent:(APCInAppMessageCustomContent * _Nonnull)content;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, APCInAppMessageLocation, "InAppMessageLocation", open) {
  APCInAppMessageLocationTop = 0,
  APCInAppMessageLocationBottom = 1,
  APCInAppMessageLocationFullScreen = 2,
};

@class APCPushEvent;

SWIFT_CLASS_NAMED("InboxMessage")
@interface APCInboxMessage : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) int64_t invalidMessageId;)
+ (int64_t)invalidMessageId SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) int64_t id;
@property (nonatomic, readonly) enum APCInboxMessageType type;
@property (nonatomic, readonly, copy) NSDate * _Nullable receivedDate;
@property (nonatomic, readonly, copy) NSDate * _Nullable expirationDate;
@property (nonatomic, readonly, copy) NSString * _Nullable customerId;
@property (nonatomic, readonly) enum APCInboxMessageStatus status;
@property (nonatomic, readonly, strong) APCPushEvent * _Nullable pushEvent;
@property (nonatomic, readonly, copy) NSString * _Nullable payload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, APCInboxMessageStatus, "InboxMessageStatus", open) {
  APCInboxMessageStatusUnread = 0,
  APCInboxMessageStatusRead = 1,
  APCInboxMessageStatusDismissed = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, APCInboxMessageType, "InboxMessageType", open) {
  APCInboxMessageTypePush = 0,
  APCInboxMessageTypeInApp = 1,
  APCInboxMessageTypeGeofence = 2,
  APCInboxMessageTypeActionBased = 3,
};


SWIFT_CLASS("_TtC10AppConnect15LocationFetcher")
@interface LocationFetcher : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class CLLocationManager;
@class CLLocation;

@interface LocationFetcher (SWIFT_EXTENSION(AppConnect)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
@end

enum APCLoggerLevel : NSUInteger;

SWIFT_CLASS_NAMED("LoggerConfig")
@interface APCLoggerConfig : NSObject
@property (nonatomic) enum APCLoggerLevel logLevel;
@property (nonatomic) BOOL writeToFile;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, APCLoggerLevel, "LoggerLevel", open) {
  APCLoggerLevelNone = 0,
  APCLoggerLevelError = 1,
  APCLoggerLevelWarning = 2,
  APCLoggerLevelInfo = 3,
  APCLoggerLevelDebug = 4,
  APCLoggerLevelVerbose = 5,
};


SWIFT_CLASS_NAMED("LongPressTrackingAttributes")
@interface APCLongPressTrackingAttributes : APCTapTrackingAttributes
- (nonnull instancetype)initWithTouchPoint:(APCTouchPoint * _Nonnull)touchPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, APCModuleTag, "ModuleTag", open) {
  APCModuleTagActionBased = 0,
  APCModuleTagAnalytics = 1,
  APCModuleTagApm = 2,
  APCModuleTagAppInbox = 3,
  APCModuleTagBackoff = 4,
  APCModuleTagCore = 5,
  APCModuleTagDb = 6,
  APCModuleTagDeeplink = 7,
  APCModuleTagEventLimit = 8,
  APCModuleTagEvent = 9,
  APCModuleTagGoal = 10,
  APCModuleTagInApp = 11,
  APCModuleTagRemoteConfig = 12,
  APCModuleTagScreenTracking = 13,
  APCModuleTagSuperAttribute = 14,
  APCModuleTagGeolocation = 15,
  APCModuleTagSnapshot = 16,
  APCModuleTagGeofence = 17,
};







/// Action type enum for notification actions
/// <ul>
///   <li>
///     none: No action
///   </li>
///   <li>
///     openApp: Opening the application
///   </li>
///   <li>
///     gotoUrl: Opening a url
///   </li>
///   <li>
///     gotoDeeplink: Opening a custom deeplink
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, APCNotificationActionType, "NotificationActionType", open) {
  APCNotificationActionTypeNone = 0,
  APCNotificationActionTypeOpenApp = 1,
  APCNotificationActionTypeGotoUrl = 2,
  APCNotificationActionTypeGotoDeeplink = 3,
};



/// Product model for commerce events
SWIFT_CLASS_NAMED("Product")
@interface APCProduct : NSObject
/// Product identifier
@property (nonatomic, copy) NSString * _Nonnull id;
/// Product name
@property (nonatomic, copy) NSString * _Nonnull name;
/// Product’s description
@property (nonatomic, copy) NSString * _Nullable productDescription;
/// Brand of product
@property (nonatomic, copy) NSString * _Nullable brand;
/// Product quantity
@property (nonatomic) NSInteger quantity;
/// Price of product
@property (nonatomic) NSDecimal price;
/// Variant of product
@property (nonatomic, copy) NSString * _Nullable variant;
/// Product category
@property (nonatomic, copy) NSString * _Nullable category;
/// Currency for product’s price
@property (nonatomic, copy) NSString * _Nonnull currency;
- (nullable instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name quantity:(NSInteger)quantity price:(NSDecimal)price currency:(NSString * _Nonnull)currency OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Event attributes for event that user completes a purchase.
/// Trigger this event when user completes a purchase.
/// Implementing a Purchase event allows you to see your revenue in real-time,
/// understand how many users are making purchases,
/// see which items are most popular,
/// and track plenty of other important purchase-related metrics.
SWIFT_CLASS_NAMED("PurchaseEventAttributes")
@interface APCPurchaseEventAttributes : APCAttributes
/// Initializes a purchase event’s builder
/// \param currency Currency used in that purchase action
///
/// \param value Value of cart at purchase action
///
/// \param products Products are purchased
///
/// \param success Result of purchase action
///
/// \param domain Domain for multiple instances
///
- (nonnull instancetype)initWithCurrency:(NSString * _Nonnull)currency value:(NSDecimal)value products:(NSArray<APCProduct *> * _Nullable)products success:(BOOL)success domain:(NSString * _Nullable)domain;
/// Add tax value attribute to event
/// \param tax Tax applied at purchase
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addTax:(NSDecimal)tax;
/// Adds ship attribute to event
/// \param ship Ship of purchase
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addShip:(NSDecimal)ship;
/// Adds discount value attribute to event
/// \param discount Discount applied at purchase
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addDiscount:(NSDecimal)discount;
/// Adds coupon attribute to event
/// \param coupon Coupon that used at the purchase action
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addCoupon:(NSString * _Nonnull)coupon;
/// Adds transaction referance attribute to event
/// \param trxId Transaction referance
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addTrxId:(NSString * _Nonnull)trxId;
/// Adds payment method attribute to event
/// \param paymentMethod Payment method used at purchase
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addPaymentMethod:(NSString * _Nonnull)paymentMethod;
/// Adds quantity attribute to event
/// \param quantity Quantity of items are purchased
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addQuantity:(NSInteger)quantity;
/// Adds error code attribute to event
/// \param errorCode Error code obtained from purchase action
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addErrorCode:(NSString * _Nonnull)errorCode;
/// Adds error message attribute to event
/// \param errorMessage Error message obtained from purchase action
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addErrorMessage:(NSString * _Nonnull)errorMessage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("PushEvent")
@interface APCPushEvent : NSObject
@property (nonatomic, readonly) enum APCNotificationActionType notificationAction;
@property (nonatomic, readonly, copy) NSString * _Nullable soundName;
@property (nonatomic, readonly, copy) NSString * _Nullable pushID;
@property (nonatomic, readonly, copy) NSString * _Nullable scheduleID;
@property (nonatomic, readonly, copy) NSString * _Nullable eventID;
@property (nonatomic, readonly, copy) NSURL * _Nullable mediaURL;
@property (nonatomic, readonly, copy) NSURL * _Nullable targetURL;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
@property (nonatomic, readonly, copy) NSString * _Nullable conversionRules;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_CLASS_NAMED("PushEventManager")
@interface APCPushEventManager : NSObject
@property (nonatomic, readonly, strong) APCPushEvent * _Nullable latestPushEvent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Attributes for that removing item from cart.
/// Trigger this event when user removes item(s) from cart.
/// Implementing a Remove from Cart event allows you to understand how many users remove item(s)
/// from cart and what items are tend to be abandoned through checkout process.
SWIFT_CLASS_NAMED("RemoveFromCartEventAttributes")
@interface APCRemoveFromCartEventAttributes : APCAttributes
/// Initializes remove from cart event attributes with given product
/// \param product Product that added to wish list
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithProduct:(APCProduct * _Nonnull)product domain:(NSString * _Nullable)domain;
/// Adds a value attribute to event
/// \param value Value of product
///
///
/// returns:
/// Event builder’s itself
- (APCRemoveFromCartEventAttributes * _Nonnull)addValue:(NSDecimal)value;
/// Adds total cart value attribute to event
/// \param totalCartValue Total cart value
///
///
/// returns:
/// Event builder’s itself
- (APCRemoveFromCartEventAttributes * _Nonnull)addTotalCartValue:(NSDecimal)totalCartValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("RemoveFromWishListEventAttributes")
@interface APCRemoveFromWishListEventAttributes : APCAttributes
/// Initializes remove from wish list attributes with given product
/// \param product Product that added to wish list
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithProduct:(APCProduct * _Nonnull)product domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class APCViewTrackingExtras;

/// Interface for screen tracking related operations
SWIFT_PROTOCOL_NAMED("ScreenTracker")
@protocol APCScreenTracker
/// Starts auto screen tracking
- (void)startAutoTracking;
/// Stops auto screen tracking activity
- (void)stopAutoTracking;
/// Starts tracking for view
/// \param view View that will be tracked
///
/// \param name Tracking name for the view
///
- (void)startTrackingWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name;
/// Starts tracking for view
/// \param view View that will be tracked
///
/// \param name Tracking name for the view
///
/// \param extras Extra attributes for tracking event
///
- (void)startTrackingWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name extras:(APCViewTrackingExtras * _Nullable)extras;
/// Starts tracking for view
/// \param viewClass ViewClass that will be tracked view’s class
///
/// \param name Tracking name for the view
///
- (void)startTrackingWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name;
/// Starts tracking for view
/// \param viewClass ViewClass that will be tracked view’s class
///
/// \param name Tracking name for the view
///
/// \param extras Extra attributes for tracking event
///
- (void)startTrackingWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name extras:(APCViewTrackingExtras * _Nullable)extras;
/// Stops tracking for view
/// \param view View that is being tracked
///
/// \param name Tracking name for the view
///
- (void)stopTrackingWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name;
/// Stops tracking for view
/// \param view View that is being tracked
///
/// \param name Tracking name for the view
///
/// \param extras Extra attributes for tracking event
///
- (void)stopTrackingWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name extras:(APCViewTrackingExtras * _Nullable)extras;
/// Stops tracking for view
/// \param viewClass ViewClass that will be tracked view’s class
///
/// \param name Tracking name for the view
///
- (void)stopTrackingWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name;
/// Stops tracking for view
/// \param viewClass ViewClass that will be tracked view’s class
///
/// \param name Tracking name for the view
///
/// \param extras Extra attributes for tracking event
///
- (void)stopTrackingWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name extras:(APCViewTrackingExtras * _Nullable)extras;
@end


/// Event attributes for event that search action,
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS_NAMED("SearchEventAttributes")
@interface APCSearchEventAttributes : APCAttributes
- (nonnull instancetype)initWithQuery:(NSString * _Nonnull)query domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Event builder for event that search action,
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS("_TtC10AppConnect18SearchEventBuilder")
@interface SearchEventBuilder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Event attributes for event that search action,
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS_NAMED("StartCheckoutEventAttributes")
@interface APCStartCheckoutEventAttributes : APCAttributes
/// Initializes an event object with required parameters
/// \param value Value of cart at checkout step
///
/// \param currency Currency of value
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithValue:(NSDecimal)value currency:(NSString * _Nonnull)currency domain:(NSString * _Nullable)domain;
/// Adds quantity attribute to event
/// \param quantity Quantity of checkout items
///
///
/// returns:
/// Event builder’s itself
- (APCStartCheckoutEventAttributes * _Nonnull)addQuantity:(NSInteger)quantity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("SwipeTrackingAttributes")
@interface APCSwipeTrackingAttributes : APCUIEventTrackingAttributes
/// Initialize SwipeTrackingAttributes
/// \param startPoint startPoint
///
/// \param endPoint endPoint
///
/// \param viewLabel viewLabel for touch’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for touch’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithStartPoint:(CGPoint)startPoint endPoint:(CGPoint)endPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end

@class UISwitch;

SWIFT_CLASS_NAMED("SwitchButtonTrackingAttributes")
@interface APCSwitchButtonTrackingAttributes : APCUIEventTrackingAttributes
/// Initialize SwitchButtonTrackingAttributes
/// \param button switchButton to track
///
- (nonnull instancetype)initWithSwitchButton:(UISwitch * _Nonnull)switchButton OBJC_DESIGNATED_INITIALIZER;
/// Initialize SwitchButtonTrackingAttributes
/// \param className className for button (e.g. “UISwitch”)
///
/// \param isChecked isChecked for button (e.g. button.isOn)
///
/// \param accessibilityLabel accessibilityLabel for button
///
/// \param componentId componentId for button
///
/// \param coordinates coordinates for button. (e.g. button.frame)
///
/// \param viewLabel viewLabel for button’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for button’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithClassName:(NSString * _Nonnull)className isChecked:(BOOL)isChecked accessibilityLabel:(NSString * _Nullable)accessibilityLabel componentId:(NSString * _Nullable)componentId coordinates:(APCUIViewPixelCoordinate * _Nullable)coordinates viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end


@class UITextField;

SWIFT_CLASS_NAMED("TextFieldTrackingAttributes")
@interface APCTextFieldTrackingAttributes : APCUIEventTrackingAttributes
/// Initialize TextFieldTrackingAttributes
/// \param textField textField to track
///
- (nonnull instancetype)initWithTextField:(UITextField * _Nonnull)textField OBJC_DESIGNATED_INITIALIZER;
/// Initialize TextFieldTrackingAttributes
/// \param className className for textField (e.g. “UITextField”)
///
/// \param value value for textField
///
/// \param placeholder placeholder for textField
///
/// \param accessibilityLabel accessibilityLabel for textField
///
/// \param componentId componentId for textField
///
/// \param coordinates coordinates for textField. (e.g. textField.frame)
///
/// \param viewLabel viewLabel for textField’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for textField’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithClassName:(NSString * _Nonnull)className value:(NSString * _Nonnull)value placeholder:(NSString * _Nullable)placeholder accessibilityLabel:(NSString * _Nullable)accessibilityLabel componentId:(NSString * _Nullable)componentId coordinates:(APCUIViewPixelCoordinate * _Nullable)coordinates viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("TouchPoint")
@interface APCTouchPoint : NSObject
- (nonnull instancetype)initWithPoint:(CGPoint)point OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface UIBarButtonItem (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) BOOL apc_isDebounceThresholdExclusion;
@end


@interface UIBarButtonItem (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) BOOL apc_containsSensitiveObject;
@end


@interface UIButton (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) BOOL apc_containsSensitiveObject;
@end


@interface UIButton (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) BOOL apc_isDebounceThresholdExclusion;
@end



@interface APCUIEventTrackingAttributes (SWIFT_EXTENSION(AppConnect))
- (void)collectWithDomain:(NSString * _Nullable)domain;
@end



@interface UISwitch (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) BOOL apc_containsSensitiveObject;
@end


@interface UITextField (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) BOOL apc_containsSensitiveObject;
@end



@interface UITextView (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) BOOL apc_containsSensitiveObject;
@end







SWIFT_CLASS_NAMED("UIViewPixelCoordinate")
@interface APCUIViewPixelCoordinate : NSObject
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface APCUIViewPixelCoordinate (SWIFT_EXTENSION(AppConnect))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end






@interface UNNotificationContent (SWIFT_EXTENSION(AppConnect))
/// Checks if the payload belongs to Dataroid
@property (nonatomic, readonly) BOOL isFromConnect;
/// Checks if the given sdk key matches with push notification payload
- (BOOL)isMatchesWith:(NSString * _Nonnull)sdkKey SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("UserAttributes")
@interface APCUserAttributes : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull collections;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface APCUserAttributes (SWIFT_EXTENSION(AppConnect))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
@end


@class UNMutableNotificationContent;

SWIFT_CLASS("_TtC10AppConnect26UserNotificationIntegrator")
@interface UserNotificationIntegrator : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull languageCode;
@property (nonatomic, readonly, strong) APCAppInbox * _Nullable inbox;
+ (UserNotificationIntegrator * _Nullable)initializeWithConfig:(AppConnectConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
- (void)processWithContent:(UNMutableNotificationContent * _Nonnull)content completion:(void (^ _Nonnull)(UNMutableNotificationContent * _Nonnull))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






/// Event attributes for event that user lists items within a specific category.
SWIFT_CLASS_NAMED("ViewCategoryEventAttributes")
@interface APCViewCategoryEventAttributes : APCAttributes
/// Initializes an attribute that user lists items within a specific category.
/// \param category Category of listed items by user
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Event attributes for event that whenever a single product is displayed.
SWIFT_CLASS_NAMED("ViewProductEventAttributes")
@interface APCViewProductEventAttributes : APCAttributes
/// Initializes view product attributes with given product
/// \param product Product that added to wish list
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithProduct:(APCProduct * _Nonnull)product domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ViewTrackingExtras")
@interface APCViewTrackingExtras : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface APCViewTrackingExtras (SWIFT_EXTENSION(AppConnect))
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
@end


@interface APCViewTrackingExtras (SWIFT_EXTENSION(AppConnect))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef APPCONNECT_SWIFT_H
#define APPCONNECT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AppConnect",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSURLSessionTask;
@class NSData;
@class NSURL;

SWIFT_CLASS("_TtC10AppConnect22APCURLSessionCollector")
@interface APCURLSessionCollector : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCURLSessionCollector * _Nonnull shared;)
+ (APCURLSessionCollector * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)startTrackingWithTask:(NSURLSessionTask * _Nonnull)task;
- (void)endTrackingWithTask:(NSURLSessionTask * _Nullable)task data:(NSData * _Nullable)data;
- (void)endTrackingWithUrl:(NSURL * _Nonnull)url data:(NSData * _Nullable)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class NSString;

SWIFT_CLASS_NAMED("APMAttributes")
@interface APCAPMAttributes : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDomain:(NSString * _Nullable)domain OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;

@interface APCAPMAttributes (SWIFT_EXTENSION(AppConnect))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
@end

enum ACHTTPMethod : NSInteger;

/// Object that holds http request & response metrics and relevant
/// properties for the purpose of sending to server
SWIFT_CLASS_NAMED("APMHTTPRecord")
@interface APCAPMHTTPRecord : NSObject
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSString * _Nullable errorType;
@property (nonatomic, copy) NSString * _Nullable errorCode;
@property (nonatomic, copy) NSString * _Nullable errorMessage;
/// Object that holds custom attributes
@property (nonatomic, strong) APCAPMAttributes * _Nullable attributes;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url domain:(NSString * _Nullable)domain;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url method:(enum ACHTTPMethod)method statusCode:(NSInteger)statusCode duration:(NSTimeInterval)duration success:(BOOL)success domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_UNAVAILABLE
@interface APCAPMHTTPRecord (SWIFT_EXTENSION(AppConnect))
- (enum ACHTTPMethod)getMethod SWIFT_WARN_UNUSED_RESULT;
- (void)setMethod:(enum ACHTTPMethod)method;
- (NSInteger)getStatusCode SWIFT_WARN_UNUSED_RESULT;
- (void)setStatusCode:(NSInteger)statusCode;
- (NSTimeInterval)getDuration SWIFT_WARN_UNUSED_RESULT;
- (void)setDuration:(NSTimeInterval)duration;
- (BOOL)getSuccess SWIFT_WARN_UNUSED_RESULT;
- (void)setSuccess:(BOOL)success;
@end


SWIFT_CLASS_NAMED("APMMutableHttpRecord")
@interface APCAPMMutableHttpRecord : NSObject
/// Type of error
@property (nonatomic, copy) NSString * _Nullable errorType;
/// Error code
@property (nonatomic, copy) NSString * _Nullable errorCode;
/// Error message
@property (nonatomic, copy) NSString * _Nullable errorMessage;
/// Object that holds custom attributes
@property (nonatomic, strong) APCAPMAttributes * _Nullable attributes;
- (void)setSuccess:(BOOL)isSuccess;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("APMMutableNetworkRecord")
@interface APCAPMMutableNetworkRecord : NSObject
/// Custom message
@property (nonatomic, copy) NSString * _Nullable message;
/// Object that holds custom attributes
@property (nonatomic, strong) APCAPMAttributes * _Nullable attributes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class APCAPMNetworkRecordErrorType;

/// Object that holds network errors and relevant properties
/// for the purpose of sending to server
SWIFT_CLASS_NAMED("APMNetworkRecord")
@interface APCAPMNetworkRecord : NSObject
@property (nonatomic, copy) NSString * _Nonnull url;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable headers;
@property (nonatomic, strong) APCAPMNetworkRecordErrorType * _Nullable type;
@property (nonatomic, copy) NSString * _Nullable exception;
@property (nonatomic, copy) NSString * _Nullable message;
/// Object that holds custom attributes
@property (nonatomic, strong) APCAPMAttributes * _Nullable attributes;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url domain:(NSString * _Nullable)domain;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url method:(enum ACHTTPMethod)method duration:(NSTimeInterval)duration type:(APCAPMNetworkRecordErrorType * _Nonnull)type exception:(NSString * _Nonnull)exception domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSError;

/// Network error types
SWIFT_CLASS_NAMED("ErrorType")
@interface APCAPMNetworkRecordErrorType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCAPMNetworkRecordErrorType * _Nonnull unknown;)
+ (APCAPMNetworkRecordErrorType * _Nonnull)unknown SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCAPMNetworkRecordErrorType * _Nonnull noConnection;)
+ (APCAPMNetworkRecordErrorType * _Nonnull)noConnection SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCAPMNetworkRecordErrorType * _Nonnull ssl;)
+ (APCAPMNetworkRecordErrorType * _Nonnull)ssl SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCAPMNetworkRecordErrorType * _Nonnull timeout;)
+ (APCAPMNetworkRecordErrorType * _Nonnull)timeout SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCAPMNetworkRecordErrorType * _Nonnull insecureConnection;)
+ (APCAPMNetworkRecordErrorType * _Nonnull)insecureConnection SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger rawValue;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)formUnion:(APCAPMNetworkRecordErrorType * _Nonnull)other;
- (void)formIntersection:(APCAPMNetworkRecordErrorType * _Nonnull)other;
- (void)formSymmetricDifference:(APCAPMNetworkRecordErrorType * _Nonnull)other;
/// Initialize network record object
/// \param error Error object
///
- (nullable instancetype)initWithError:(NSError * _Nonnull)error OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_UNAVAILABLE
@interface APCAPMNetworkRecord (SWIFT_EXTENSION(AppConnect))
- (enum ACHTTPMethod)getMethod SWIFT_WARN_UNUSED_RESULT;
- (void)setMethod:(enum ACHTTPMethod)method;
- (NSTimeInterval)getDuration SWIFT_WARN_UNUSED_RESULT;
- (void)setDuration:(NSTimeInterval)duration;
@end



SWIFT_CLASS_NAMED("Attributes")
@interface APCAttributes : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class APCProduct;

SWIFT_CLASS_NAMED("AddToCardEventAttributes")
@interface APCAddToCardEventAttributes : APCAttributes
/// Initializes add to cart attributes with given product
/// \param product Product that added to cart
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithProduct:(APCProduct * _Nonnull)product domain:(NSString * _Nullable)domain;
/// Adds value attribute to event
/// \param value Value of products
///
///
/// returns:
/// Event builder’s itself
- (APCAddToCardEventAttributes * _Nonnull)addValue:(NSDecimal)value;
/// Adds total cart value attribute to event
/// \param totalCartValue Total cart value
///
///
/// returns:
/// Event builder’s itself
- (APCAddToCardEventAttributes * _Nonnull)addTotalCartValue:(NSDecimal)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("AddToWishListEventAttributes")
@interface APCAddToWishListEventAttributes : APCAttributes
/// Initializes add to wish list attributes with given product
/// \param product Product that added to wish list
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithProduct:(APCProduct * _Nonnull)product domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Configuration object for APM related features
SWIFT_CLASS("_TtC10AppConnect19AppConnectAPMConfig")
@interface AppConnectAPMConfig : NSObject
/// Flag that controls APM collection state
/// default value <code>true</code>
@property (nonatomic) BOOL recordCollectionEnabled;
/// Maximum number of stored records, if there is a connection problem with server
@property (nonatomic) NSInteger recordStorageLimit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Configuration object for application inbox related features
SWIFT_CLASS("_TtC10AppConnect24AppConnectAppInboxConfig")
@interface AppConnectAppInboxConfig : NSObject
/// Flag that controls App Inbox feature state
/// default value <code>false</code>
@property (nonatomic) BOOL isEnabled;
/// Default count limit for stored messages, defaults to 5000
@property (nonatomic) NSInteger storageLimit;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AutoCollectingComponentConfig;
@class AutoCollectingGestureConfig;
@class AutoCollectingAPMConfig;

/// Configuration object for auto-collecting related features
SWIFT_CLASS("_TtC10AppConnect30AppConnectAutoCollectingConfig")
@interface AppConnectAutoCollectingConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable domain;
/// Auto collecting UI components config
@property (nonatomic, readonly, strong) AutoCollectingComponentConfig * _Nonnull component;
/// Auto collecting gesture event config
@property (nonatomic, readonly, strong) AutoCollectingGestureConfig * _Null_unspecified gesture;
/// Auto collecting APM config
@property (nonatomic, readonly, strong) AutoCollectingAPMConfig * _Null_unspecified apm;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol AppConnectEventListenerDelegate;
@protocol APCInAppMessageListener;
@protocol APCInAppMessageAlertTapListener;
@protocol APCInAppMessageAlertDeeplinkHandler;
@protocol APCAutoCollectionApmListener;
@protocol APCScreenTracker;
@class APCAppListener;
@class APCPushEventManager;
@class AppConnectConfig;
@class APCAppInbox;

/// Root object for AppConnect SDK, all features should be used through the client instance
SWIFT_CLASS("_TtC10AppConnect16AppConnectClient")
@interface AppConnectClient : NSObject
/// Delegate object to notify when fired events
@property (nonatomic, weak) id <AppConnectEventListenerDelegate> _Nullable eventListenerDelegate;
/// Delegate object to notify when in-app message received
@property (nonatomic, weak) id <APCInAppMessageListener> _Nullable inAppMessageListenerDelegate;
/// Delegate object to notify when in-app message alert interactions occured
@property (nonatomic, weak) id <APCInAppMessageAlertTapListener> _Nullable alertTapListenerDelegate;
/// Delegate object to notify when in-app message deeplink needs to be handled
@property (nonatomic, weak) id <APCInAppMessageAlertDeeplinkHandler> _Nullable alertDeeplinkHandlerDelegate;
@property (nonatomic, weak) id <APCAutoCollectionApmListener> _Nullable autoCollectingApmListenerDelegate;
/// Screen tracking module
@property (nonatomic, readonly, strong) id <APCScreenTracker> _Nonnull screenTracker;
@property (nonatomic, readonly, strong) APCAppListener * _Nonnull listener;
@property (nonatomic, readonly, strong) APCPushEventManager * _Null_unspecified pushEventManager;
@property (nonatomic, readonly, strong) AppConnectConfig * _Nonnull config;
@property (nonatomic, readonly, strong) APCAppInbox * _Nullable inbox;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AppConnectClient (SWIFT_EXTENSION(AppConnect))
/// Creates an AppConnectClient instance with provided configuration
/// \param config Configuration instance for SDK settings
///
+ (AppConnectClient * _Nullable)initializeWithConfig:(AppConnectConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
@end


@interface AppConnectClient (SWIFT_EXTENSION(AppConnect))
/// Collects an event for language update
/// \param languageCode Language code for the application
///
- (void)updateLanguageWithLanguageCode:(NSString * _Nonnull)languageCode;
@end


@interface AppConnectClient (SWIFT_EXTENSION(AppConnect))
/// Enables geofencing functionality
/// This function should be called after gathering location permission
- (void)enableGeofencing;
/// Disables geofencing functionality
- (void)disableGeofencing;
@end



@class AppConnectUser;
@class APCUserAttributes;

@interface AppConnectClient (SWIFT_EXTENSION(AppConnect))
/// Sets active user of the application
/// \param user User object that contains any details about current user
///
- (void)setUser:(AppConnectUser * _Nonnull)user;
/// Updates information for active user
/// \param attributes UserAttributes object to pass custom data
///
- (void)updateUserWithAttributes:(APCUserAttributes * _Nonnull)attributes;
/// Clears previously set user
- (void)clearUser;
/// Device identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
///
/// returns:
/// DeviceProperty string
- (NSString * _Nullable)devicePropertyString SWIFT_WARN_UNUSED_RESULT;
- (void)collectAPMHTTPRecord:(APCAPMHTTPRecord * _Nonnull)record;
- (void)collectAPMNetworkRecord:(APCAPMNetworkRecord * _Nonnull)record;
@end


@interface AppConnectClient (SWIFT_EXTENSION(AppConnect))
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key intValue:(NSInteger)intValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key doubleValue:(double)doubleValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key int64Value:(int64_t)int64Value;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key floatValue:(float)floatValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key boolValue:(BOOL)boolValue;
- (void)setSuperAttributeWithKey:(NSString * _Nonnull)key dateValue:(NSDate * _Nonnull)dateValue;
- (BOOL)clearSuperAttributeWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


@interface AppConnectClient (SWIFT_EXTENSION(AppConnect))
- (void)setCountry:(NSString * _Nonnull)country;
- (void)setContinent:(NSString * _Nonnull)continent;
- (void)setCity:(NSString * _Nonnull)city;
- (void)setRegion:(NSString * _Nonnull)region;
- (void)updateCoordinatesWithLatitude:(double)latitude longitude:(double)longitude;
- (void)clearCountry;
- (void)clearContinent;
- (void)clearCity;
- (void)clearRegion;
- (void)clearCoordinates;
@end

@class AppConnectPushConfig;
@class AppConnectScreenTrackingConfig;
@class AppConnectInAppMessagingConfig;
@class APCLoggerConfig;
@class APCNetworkConfig;
@class AppConnectSnapshotConfig;
@class APCAppConnectDatabaseConfig;

/// Configuration class for AppConnectClient
SWIFT_CLASS("_TtC10AppConnect16AppConnectConfig")
@interface AppConnectConfig : NSObject
/// Key for AppConnect SDK
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkKey;
/// Endpoint for AppConnect server
@property (nonatomic, readonly, copy) NSString * _Nonnull serverURL;
/// Domain name for the multiple instances
@property (nonatomic, readonly, copy) NSString * _Nullable domain;
/// Migrate databse before multiple instance support into this domain.
/// This field should be set before client initialization. Defaults to <code>false</code>
@property (nonatomic) BOOL multipleInstanceMigrationEnabled;
/// Flag that controls collection of events
/// If there is a paused session already functioned by <code>AppConnectConfig.pauseEventCollection()</code>
/// This function ignores the paused session, disgards it and starts control collection of events
/// Defaults to <code>false</code>
@property (nonatomic) BOOL eventCollectingDisabled;
/// Maximum number of stored events, if there is a connection problem with server
@property (nonatomic) NSInteger eventStorageLimit;
/// Default timeout period of a session
@property (nonatomic) NSTimeInterval sessionDropDuration;
/// Deletes the storage database. This field should be set before client initialization.
@property (nonatomic) BOOL resetDatabase;
/// Configuration object instance for push notifications feature
@property (nonatomic, readonly, strong) AppConnectPushConfig * _Nonnull push;
/// Configuration object instance for screen tracking related features
@property (nonatomic, readonly, strong) AppConnectScreenTrackingConfig * _Nonnull screenTracking;
/// Configuration object instance for APM related features
@property (nonatomic, readonly, strong) AppConnectAPMConfig * _Nonnull apm;
/// Configuration object instance for in-app messaging related features
@property (nonatomic, readonly, strong) AppConnectInAppMessagingConfig * _Nonnull inApp;
/// Configuration object instance for logger
@property (nonatomic, readonly, strong) APCLoggerConfig * _Nonnull logger;
/// Configuration object instance for networking
@property (nonatomic, readonly, strong) APCNetworkConfig * _Nonnull network;
/// Configuration object instance for networking
@property (nonatomic, readonly, strong) AppConnectSnapshotConfig * _Nonnull snapshot;
/// Configuration object instance for App Inbox feature
@property (nonatomic, readonly, strong) AppConnectAppInboxConfig * _Null_unspecified appInbox;
/// App group identifier for shared container
@property (nonatomic, copy) NSString * _Nullable appGroupIdentifier;
/// Configuration object instance for auto collecting
@property (nonatomic, readonly, strong) AppConnectAutoCollectingConfig * _Nonnull autoCollecting;
/// Array of event names listened by host application
@property (nonatomic, copy) NSArray<NSString *> * _Nullable eventsToListen;
/// Identifier for only plugins
@property (nonatomic, copy) NSString * _Nullable frameworkIdentifier;
/// encryption key for database
@property (nonatomic, readonly, strong) APCAppConnectDatabaseConfig * _Nonnull databaseConfig;
/// Language code for the application, should be updated upon language changes
@property (nonatomic, readonly, copy) NSString * _Nonnull languageCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes configuration instance
/// \param sdkKey Key for AppConnect SDK
///
/// \param serverURL Endpoint for AppConnect server
///
/// \param languageCode Language code for the host applications active language. For exp: “tr”, “en”
///
/// \param domain domain name for multiple instances
///
- (nonnull instancetype)initWithSdkKey:(NSString * _Nonnull)sdkKey serverURL:(NSString * _Nonnull)serverURL languageCode:(NSString * _Nonnull)languageCode domain:(NSString * _Nullable)domain;
/// Initializes configuration instance
/// \param sdkKey Key for AppConnect SDK
///
/// \param serverURL Endpoint for AppConnect server
///
/// \param languageCode Language code for the host applications active language. For exp: “tr”, “en”
///
/// \param domain domain name for multiple instances
///
- (nonnull instancetype)initWithSdkKey:(NSString * _Nonnull)sdkKey serverURL:(NSString * _Nonnull)serverURL languageCode:(NSString * _Nonnull)languageCode databaseConfig:(APCAppConnectDatabaseConfig * _Nullable)databaseConfig domain:(NSString * _Nullable)domain OBJC_DESIGNATED_INITIALIZER;
@end


@interface AppConnectConfig (SWIFT_EXTENSION(AppConnect))
@end

@class APCTrustPolicy;

/// Configuration object for network features
SWIFT_CLASS_NAMED("NetworkConfig")
@interface APCNetworkConfig : NSObject
/// Trust policies for network managers
/// important:
/// You can’t set or reset the value after SDK has been initialized, this will cause a crash!
@property (nonatomic, copy) NSArray<APCTrustPolicy *> * _Nullable trustPolicies;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AppConnectConfig (SWIFT_EXTENSION(AppConnect))
/// Pauses event collection
/// This function is handy when current session may not terminated but paused
/// If <code>AppConnectConfig.eventCollectionDisabled</code> is true, this function has no effect
- (void)pauseEventCollection;
/// Resumes event collection
/// Resumes event collection of paused session
/// If <code>AppConnectConfig.eventCollectionDisabled</code> is false his function has no effect
- (void)resumeEventCollection;
@end




SWIFT_CLASS_NAMED("AppConnectDatabaseConfig")
@interface APCAppConnectDatabaseConfig : NSObject
- (nonnull instancetype)initWithDatabaseEncryptionKey:(NSArray<NSNumber *> * _Nullable)databaseEncryptionKey databaseEncryptionEnabled:(BOOL)databaseEncryptionEnabled OBJC_DESIGNATED_INITIALIZER;
- (void)migrateToRawKeyFrom:(NSString * _Nonnull)previousDatabaseEncryptionKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL("_TtP10AppConnect31AppConnectEventListenerDelegate_")
@protocol AppConnectEventListenerDelegate
/// Method that will be invoked when a new event is fired
/// \param attributes Attributes of fired event
///
- (void)firedEventWithAttributes:(NSDictionary<NSString *, id> * _Nullable)attributes;
@end


/// Configuration object for in-app messaging related features
SWIFT_CLASS("_TtC10AppConnect30AppConnectInAppMessagingConfig")
@interface AppConnectInAppMessagingConfig : NSObject
/// Flag that controls in-app messaging enabled or not
@property (nonatomic) BOOL inAppMessagingEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Configuration object for push notifications feature
SWIFT_CLASS("_TtC10AppConnect20AppConnectPushConfig")
@interface AppConnectPushConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10AppConnect23AppConnectReservedEvent")
@interface AppConnectReservedEvent : NSObject
/// Avoid initialization
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Event name for screen tracking start event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewTrackingStart;)
+ (NSString * _Nonnull)viewTrackingStart SWIFT_WARN_UNUSED_RESULT;
/// Event name for screen tracking stop event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewTrackingStop;)
+ (NSString * _Nonnull)viewTrackingStop SWIFT_WARN_UNUSED_RESULT;
/// Event name for push token update event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull pushTokenUpdate;)
+ (NSString * _Nonnull)pushTokenUpdate SWIFT_WARN_UNUSED_RESULT;
/// Event name for language update event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull languageUpdate;)
+ (NSString * _Nonnull)languageUpdate SWIFT_WARN_UNUSED_RESULT;
/// Event name for user information update event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull userUpdate;)
+ (NSString * _Nonnull)userUpdate SWIFT_WARN_UNUSED_RESULT;
/// Event name for session start event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sessionStart;)
+ (NSString * _Nonnull)sessionStart SWIFT_WARN_UNUSED_RESULT;
/// Event name for session stop event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sessionStop;)
+ (NSString * _Nonnull)sessionStop SWIFT_WARN_UNUSED_RESULT;
/// Event name for notification open event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationOpen;)
+ (NSString * _Nonnull)notificationOpen SWIFT_WARN_UNUSED_RESULT;
/// Event name for notification received event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull notificationReceive;)
+ (NSString * _Nonnull)notificationReceive SWIFT_WARN_UNUSED_RESULT;
/// Event name for goal achieved event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull goalAchieved;)
+ (NSString * _Nonnull)goalAchieved SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message button click event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageButtonClick;)
+ (NSString * _Nonnull)inAppMessageButtonClick SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message read, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageRead;)
+ (NSString * _Nonnull)inAppMessageRead SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message close, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageClose;)
+ (NSString * _Nonnull)inAppMessageClose SWIFT_WARN_UNUSED_RESULT;
/// Event name for in app message fetched
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull inAppMessageFetched;)
+ (NSString * _Nonnull)inAppMessageFetched SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s first opening, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkFirstOpen;)
+ (NSString * _Nonnull)sdkFirstOpen SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s device update settings event, shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceUpdateSettings;)
+ (NSString * _Nonnull)deviceUpdateSettings SWIFT_WARN_UNUSED_RESULT;
/// Event name for APM network errors, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull apmNetworkError;)
+ (NSString * _Nonnull)apmNetworkError SWIFT_WARN_UNUSED_RESULT;
/// Event name for APM http events, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull apmHTTPCall;)
+ (NSString * _Nonnull)apmHTTPCall SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s add to cart commerce event, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addToCart;)
+ (NSString * _Nonnull)addToCart SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that user completes a purchase,
/// shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull purchase;)
+ (NSString * _Nonnull)purchase SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s search commerce event, shouldn’t be used manually
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull search;)
+ (NSString * _Nonnull)search SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s view product commerce event
/// that whenever a single product is displayed, shouldn’t be used manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewProduct;)
+ (NSString * _Nonnull)viewProduct SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that user lists items within a specific category,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull viewCategory;)
+ (NSString * _Nonnull)viewCategory SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that removing item(s) from cart,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull removeFromCart;)
+ (NSString * _Nonnull)removeFromCart SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that user removes all items from cart,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clearCart;)
+ (NSString * _Nonnull)clearCart SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event for initiating a checkout/payment process,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull startCheckout;)
+ (NSString * _Nonnull)startCheckout SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event
/// that not being able to go to the next step in the checkout funnel,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorCheckout;)
+ (NSString * _Nonnull)errorCheckout SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event
/// that adding an item to wish list,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull addToWishList;)
+ (NSString * _Nonnull)addToWishList SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s commerce event that remove an item from wish list,
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull removeFromWishList;)
+ (NSString * _Nonnull)removeFromWishList SWIFT_WARN_UNUSED_RESULT;
/// Event name for SDK’s deeplink launched event that is for used tracking referrals for deeplinks.
/// shouldn’t be used manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deeplinkLaunched;)
+ (NSString * _Nonnull)deeplinkLaunched SWIFT_WARN_UNUSED_RESULT;
/// UIButton <code>touchUpInside</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull buttonClick;)
+ (NSString * _Nonnull)buttonClick SWIFT_WARN_UNUSED_RESULT;
/// UISwitch <code>valueChanged</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull toggleChange;)
+ (NSString * _Nonnull)toggleChange SWIFT_WARN_UNUSED_RESULT;
/// UITextField and UITextView <code>textDidEndEditing</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull textChange;)
+ (NSString * _Nonnull)textChange SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>tap</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull touch;)
+ (NSString * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>swipe</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull swipe;)
+ (NSString * _Nonnull)swipe SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>long press</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull longPress;)
+ (NSString * _Nonnull)longPress SWIFT_WARN_UNUSED_RESULT;
/// UIWindow <code>double tap</code> event
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull doubleTap;)
+ (NSString * _Nonnull)doubleTap SWIFT_WARN_UNUSED_RESULT;
/// Set of all reserved events, can be used for checking name collisions
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSSet<NSString *> * _Nonnull reservedEvents;)
+ (NSSet<NSString *> * _Nonnull)reservedEvents SWIFT_WARN_UNUSED_RESULT;
@end


/// Configuration object for screen tracking features
SWIFT_CLASS("_TtC10AppConnect30AppConnectScreenTrackingConfig")
@interface AppConnectScreenTrackingConfig : NSObject
/// Flag that indicates screen tracking enabled or not,
/// default value <code>true</code>
@property (nonatomic) BOOL enabled;
/// Flag for auto screen tracking state,
/// default value <code>true</code>
@property (nonatomic) BOOL autoTrackingEnabled;
/// Flag for tracking inner most or the outer most view controller,
/// Default value <code>false</code>
@property (nonatomic) BOOL shouldTrackInnerViewController;
/// A set of excluded view controllers
@property (nonatomic, copy) NSSet<NSString *> * _Nonnull viewControllerExclusions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Interface for view/view controllers, that needs to configure screen tracking
SWIFT_PROTOCOL("_TtP10AppConnect36AppConnectScreenTrackingConfigurator_")
@protocol AppConnectScreenTrackingConfigurator <NSObject>
/// Auto screen tracking name for the object
@property (nonatomic, readonly, copy) NSString * _Nonnull apc_screenTrackingName;
@end


/// Interface for defining screen tracking exclusions
SWIFT_PROTOCOL("_TtP10AppConnect33AppConnectScreenTrackingExclusion_")
@protocol AppConnectScreenTrackingExclusion <NSObject>
/// Flag that indicates, if current screen should be an exclusion from screen tracking
@property (nonatomic, readonly) BOOL apc_isAutoScreenTrackingExclusion;
@end


/// Configuration object for snapshotting feature.
/// warning:
/// <em>Snapshot collection should never be enabled for store distribution releases.</em>
SWIFT_CLASS("_TtC10AppConnect24AppConnectSnapshotConfig")
@interface AppConnectSnapshotConfig : NSObject
/// Enables capturing snapshots of tracked screens.
/// warning:
/// Since screens can contain sensitive user information,
/// <em>should never be used in store distribution releases</em>.
/// warning:
/// Will be ineffective unless <em>enabledBundleIds</em> property is set correctly.
@property (nonatomic) BOOL recordingEnabled;
@property (nonatomic) NSInteger latencyInMillis;
/// Bundle identifiers that can enable snapshot capturing.
/// warning:
/// Your app store distribution bundle id <em>must not</em> be in this list.
/// warning:
/// It is strongly encouraged to consider setting value of this parameter as a
/// compile-time constant string like <code>com.commencis.connect.debug</code>, instead of a run-time
/// value like<code>Bundle.main.bundleIdentifier</code>. Since <code>Bundle.main.bundleIdentifier</code> will
/// return identifier of current bundle regardless of environment the build is running on.
/// Thus this parameter won’t provide any safety at all.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable enabledBundleIDs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class APCCertificate;

SWIFT_CLASS_NAMED("AppConnectTrustPolicy")
@interface APCTrustPolicy : NSObject
- (nonnull instancetype)initWithEvaluationDisabledPolicyWithEndpoint:(NSString * _Nonnull)endpoint certificates:(NSArray<APCCertificate *> * _Nonnull)certificates;
- (nonnull instancetype)initWithEndpoint:(NSString * _Nonnull)endpoint certificates:(NSArray<APCCertificate *> * _Nonnull)certificates evaluationDisabled:(BOOL)evaluationDisabled OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum APCGender : NSInteger;

/// Object that contains any information related to active user
SWIFT_CLASS("_TtC10AppConnect14AppConnectUser")
@interface AppConnectUser : NSObject
/// Primary identifier of the user
@property (nonatomic, readonly, copy) NSString * _Nonnull customerId;
/// Email address of the user
@property (nonatomic, copy) NSString * _Nullable email;
/// Phone number of the user, same formatting should be used.
@property (nonatomic, copy) NSString * _Nullable phone;
/// National identity number of the user
@property (nonatomic, copy) NSString * _Nullable nationalId;
/// First name of the user
@property (nonatomic, copy) NSString * _Nullable firstName;
/// Last name of the user
@property (nonatomic, copy) NSString * _Nullable lastName;
/// Gender of the user
@property (nonatomic) enum APCGender gender;
/// Date of birth of the user
@property (nonatomic, copy) NSDate * _Nullable dateOfBirth;
/// User attributes to pass custom data to user object
@property (nonatomic, strong) APCUserAttributes * _Nullable attributes;
/// Creates an instance of user object
/// \param customerId Primary identifier for user, shouldn’t be empty.
///
- (nonnull instancetype)initWithCustomerId:(NSString * _Nonnull)customerId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@protocol APCAppInboxDelegate;
@class APCInboxMessage;
@class APCAppInboxQuery;

SWIFT_CLASS_NAMED("AppInbox")
@interface APCAppInbox : NSObject
/// App Inbox delegate
@property (nonatomic, weak) id <APCAppInboxDelegate> _Nullable delegate;
/// Fetchs stored inbox messages from database
- (NSArray<APCInboxMessage *> * _Nullable)fetchMessages SWIFT_WARN_UNUSED_RESULT;
/// Fetchs stored inbox messages from database with query
/// \param query Query for messages
///
- (NSArray<APCInboxMessage *> * _Nullable)fetchMessagesWithQuery:(APCAppInboxQuery * _Nullable)query SWIFT_WARN_UNUSED_RESULT;
/// Deletes inbox messages from database
/// \param ids Message identifiers
///
- (BOOL)deleteMessagesWithIds:(NSArray<NSNumber *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
/// Reads inbox messages from database
/// \param ids Message identifiers
///
- (BOOL)readMessagesWithIds:(NSArray<NSNumber *> * _Nonnull)ids SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Interface for handling inbox events
SWIFT_PROTOCOL_NAMED("AppInboxDelegate")
@protocol APCAppInboxDelegate
/// Called when a message is updated
/// \param inbox App inbox
///
/// \param message Updated message
///
- (void)inbox:(APCAppInbox * _Nonnull)inbox didUpdate:(APCInboxMessage * _Nonnull)message;
/// Called when messages are removed from inbox
/// \param inbox App Inbox
///
/// \param ids Removed message identifiers
///
- (void)inbox:(APCAppInbox * _Nonnull)inbox didDeleteMessages:(NSArray<NSNumber *> * _Nonnull)ids;
@end

enum APCInboxMessageType : NSInteger;
enum APCInboxMessageStatus : NSInteger;

SWIFT_CLASS_NAMED("AppInboxQuery")
@interface APCAppInboxQuery : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (APCAppInboxQuery * _Nonnull)messageType:(enum APCInboxMessageType)messageType SWIFT_WARN_UNUSED_RESULT;
- (APCAppInboxQuery * _Nonnull)status:(enum APCInboxMessageStatus)status SWIFT_WARN_UNUSED_RESULT;
- (APCAppInboxQuery * _Nonnull)from:(NSDate * _Nonnull)from SWIFT_WARN_UNUSED_RESULT;
- (APCAppInboxQuery * _Nonnull)to:(NSDate * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
- (APCAppInboxQuery * _Nonnull)anonymous:(BOOL)anonymous SWIFT_WARN_UNUSED_RESULT;
@end

@class UNNotification;

/// Class that listens application state changes and notifies AppConnect SDK
SWIFT_CLASS_NAMED("AppListener")
@interface APCAppListener : NSObject
/// Notifies the SDK about application finished launching
/// \param launchOptions Application launch options
///
- (void)appDidFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
/// Notifies the SDK about remote notification registration
/// \param tokenData Device token for remote notifications
///
- (void)appDidRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)tokenData;
/// Notifies the SDK upon reciveing remote notifications
/// \param userInfo User info dictionary for the notification
///
- (void)appDidReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo handleAction:(BOOL)handleAction;
/// Notifies the SDK upon reciveing local notifications when app is foreground
/// \param notification UNNotification
///
- (void)appWillPresentNotification:(UNNotification * _Nonnull)notification;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class NSNumber;

@interface APCAttributes (SWIFT_EXTENSION(AppConnect))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addNumber:(NSNumber * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (void)collect;
@end


/// Auto collect configuration for APM
SWIFT_CLASS("_TtC10AppConnect23AutoCollectingAPMConfig")
@interface AutoCollectingAPMConfig : NSObject
/// Flags that controls auto collecting on apm events.
/// Default value <code>true</code>
@property (nonatomic) BOOL isEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AutoCollectingAPMConfig (SWIFT_EXTENSION(AppConnect))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL apmEnabled;)
+ (BOOL)apmEnabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL apmSwizzlingEnabled;)
+ (BOOL)apmSwizzlingEnabled SWIFT_WARN_UNUSED_RESULT;
@end



/// Interface to change apm records before event submission
SWIFT_PROTOCOL_NAMED("AutoCollectingApmListener")
@protocol APCAutoCollectionApmListener
@optional
/// Delegate method that will be invoked before sending event
/// \param record APMHTTPRecord object
///
- (APCAPMMutableHttpRecord * _Nonnull)willCollectHttpRecordWithRecord:(APCAPMHTTPRecord * _Nonnull)record SWIFT_WARN_UNUSED_RESULT;
/// Delegate method that will be invoked before sending event
/// \param record APMNetworkRecord object
///
- (APCAPMMutableNetworkRecord * _Nonnull)willCollectNetworkRecordWithRecord:(APCAPMNetworkRecord * _Nonnull)record SWIFT_WARN_UNUSED_RESULT;
@end


/// Auto collect configuration for UI component events
SWIFT_CLASS("_TtC10AppConnect29AutoCollectingComponentConfig")
@interface AutoCollectingComponentConfig : NSObject
/// Flags that controls auto collecting on components such as UIButton, USwitch etc.
/// Default value <code>true</code>
@property (nonatomic) BOOL isEnabled;
/// Threshold value for ButtonClick events
/// Default value <code>0</code>
@property (nonatomic) NSInteger debounceThreshold;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Auto collect configuration for gesture events
SWIFT_CLASS("_TtC10AppConnect27AutoCollectingGestureConfig")
@interface AutoCollectingGestureConfig : NSObject
/// Flags that controls auto collecting on gesture events
/// Default value <code>false</code>
@property (nonatomic) BOOL isEnabled;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("UIEventTrackingAttributes")
@interface APCUIEventTrackingAttributes : NSObject
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIButton;
@class APCUIViewPixelCoordinate;

SWIFT_CLASS_NAMED("ButtonTrackingAttributes")
@interface APCButtonTrackingAttributes : APCUIEventTrackingAttributes
/// Initialize ButtonTrackingAttributes
/// \param button button to track
///
- (nonnull instancetype)initWithButton:(UIButton * _Nonnull)button OBJC_DESIGNATED_INITIALIZER;
/// Initialize ButtonTrackingAttributes
/// \param className className for button (e.g. “UIButton”)
///
/// \param label label for button (e.g. button.title)
///
/// \param accessibilityLabel accessibilityLabel for button
///
/// \param componentId componentId for button
///
/// \param coordinates coordinates for button. (e.g. button.frame)
///
/// \param viewLabel viewLabel for button’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for button’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithClassName:(NSString * _Nonnull)className label:(NSString * _Nullable)label accessibilityLabel:(NSString * _Nullable)accessibilityLabel componentId:(NSString * _Nullable)componentId coordinates:(APCUIViewPixelCoordinate * _Nullable)coordinates viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end

@class APCCertificateFile;

SWIFT_CLASS_NAMED("Certificate")
@interface APCCertificate : NSObject
+ (APCCertificate * _Nonnull)file:(APCCertificateFile * _Nonnull)file SWIFT_WARN_UNUSED_RESULT;
+ (APCCertificate * _Nonnull)base64:(NSString * _Nonnull)encodedString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSBundle;

SWIFT_CLASS_NAMED("CertificateFile")
@interface APCCertificateFile : NSObject
- (nonnull instancetype)initWithBundle:(NSBundle * _Nonnull)bundle fileName:(NSString * _Nonnull)fileName fileExtension:(NSString * _Nonnull)fileExtension OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ClearCartEventAttributes")
@interface APCClearCartEventAttributes : APCAttributes
/// Initializes event object
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithDomain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ConnectionType")
@interface APCNetworkConnectionType : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull none;)
+ (APCNetworkConnectionType * _Nonnull)none SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull cellular;)
+ (APCNetworkConnectionType * _Nonnull)cellular SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull wifi;)
+ (APCNetworkConnectionType * _Nonnull)wifi SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull ethernet;)
+ (APCNetworkConnectionType * _Nonnull)ethernet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull bluetooth;)
+ (APCNetworkConnectionType * _Nonnull)bluetooth SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull wifiAware;)
+ (APCNetworkConnectionType * _Nonnull)wifiAware SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull loWpan;)
+ (APCNetworkConnectionType * _Nonnull)loWpan SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) APCNetworkConnectionType * _Nonnull vpn;)
+ (APCNetworkConnectionType * _Nonnull)vpn SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger rawValue;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithRawValue:(NSInteger)rawValue OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (void)formUnion:(APCNetworkConnectionType * _Nonnull)other;
- (void)formIntersection:(APCNetworkConnectionType * _Nonnull)other;
- (void)formSymmetricDifference:(APCNetworkConnectionType * _Nonnull)other;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



SWIFT_CLASS_NAMED("CustomEventBuilder")
@interface APCCustomEventBuilder : NSObject
- (nonnull instancetype)initWithDomain:(NSString * _Nullable)domain eventName:(NSString * _Nonnull)eventName OBJC_DESIGNATED_INITIALIZER;
- (APCCustomEventBuilder * _Nonnull)addAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
- (APCCustomEventBuilder * _Nonnull)addDate:(NSDate * _Nonnull)date key:(NSString * _Nonnull)key;
- (APCCustomEventBuilder * _Nonnull)addBoolean:(BOOL)boolean key:(NSString * _Nonnull)key;
- (APCCustomEventBuilder * _Nonnull)addNumber:(NSNumber * _Nonnull)number key:(NSString * _Nonnull)key;
- (APCCustomEventBuilder * _Nonnull)addString:(NSString * _Nonnull)string key:(NSString * _Nonnull)key;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("DBAPMRecord")
@interface DBAPMRecord : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@interface DBAPMRecord (SWIFT_EXTENSION(AppConnect))
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBActionBased")
@interface DBActionBased : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@interface DBActionBased (SWIFT_EXTENSION(AppConnect))
@property (nonatomic, copy) NSDate * _Nullable date;
@property (nonatomic) BOOL delivered;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable parentId;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBEvent")
@interface DBEvent : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@interface DBEvent (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) int64_t id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBGeofence")
@interface DBGeofence : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface DBGeofence (SWIFT_EXTENSION(AppConnect))
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBGoal")
@interface DBGoal : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@interface DBGoal (SWIFT_EXTENSION(AppConnect))
@property (nonatomic, copy) NSString * _Nullable eventName;
@property (nonatomic, copy) NSDate * _Nullable expDate;
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


SWIFT_CLASS_NAMED("DBInboxMessage")
@interface DBInboxMessage : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end



@interface DBInboxMessage (SWIFT_EXTENSION(AppConnect))
@property (nonatomic, copy) NSString * _Nullable customerId;
@property (nonatomic, copy) NSDate * _Nullable expirationDate;
@property (nonatomic) int64_t id;
@property (nonatomic, copy) NSString * _Nullable payload;
@property (nonatomic, copy) NSString * _Nullable pushId;
@property (nonatomic, copy) NSDate * _Nullable receivedDate;
@property (nonatomic, copy) NSString * _Nullable scheduleId;
@property (nonatomic) int16_t status;
@property (nonatomic) int16_t type;
@end


SWIFT_CLASS_NAMED("DBSession")
@interface DBSession : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end


@interface DBSession (SWIFT_EXTENSION(AppConnect))
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, copy) NSString * _Nullable payload;
@end


/// Event attributes for deeplink launched event that user opens application with deeplink
SWIFT_CLASS_NAMED("DeeplinkAttributes")
@interface APCDeeplinkAttributes : NSObject
/// Initialize deep link attributes
/// \param url Deep link url parameter
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url domain:(NSString * _Nullable)domain OBJC_DESIGNATED_INITIALIZER;
/// Initialize deep link attributes
/// \param url Deep link url parameter
///
/// \param options Deep link options
///
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options domain:(NSString * _Nullable)domain OBJC_DESIGNATED_INITIALIZER;
/// Collects event
- (void)collect;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface APCDeeplinkAttributes (SWIFT_EXTENSION(AppConnect))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
@end

@class APCTouchPoint;

SWIFT_CLASS_NAMED("TapTrackingAttributes")
@interface APCTapTrackingAttributes : APCUIEventTrackingAttributes
/// Initialize TapTrackingAttributes
/// \param touchPoint touchPoint
///
/// \param viewLabel viewLabel for touch’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for touch’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithTouchPoint:(APCTouchPoint * _Nonnull)touchPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("DoubleTapTrackingAttributes")
@interface APCDoubleTapTrackingAttributes : APCTapTrackingAttributes
- (nonnull instancetype)initWithTouchPoint:(APCTouchPoint * _Nonnull)touchPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, APCGender, "Gender", open) {
  APCGenderUndefined = 0,
  APCGenderMale = 1,
  APCGenderFemale = 2,
  APCGenderNonBinary = 3,
  APCGenderUnknown = 4,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ACHTTPMethod, "HTTPMethod", open) {
  ACHTTPMethodGET = 0,
  ACHTTPMethodHEAD = 1,
  ACHTTPMethodPOST = 2,
  ACHTTPMethodPUT = 3,
  ACHTTPMethodDELETE = 4,
  ACHTTPMethodCONNECT = 5,
  ACHTTPMethodOPTIONS = 6,
  ACHTTPMethodTRACE = 7,
  ACHTTPMethodPATCH = 8,
};

/// Action type enum for in-app message actions
/// <ul>
///   <li>
///     dismiss: Just dismissing the alert
///   </li>
///   <li>
///     gotoUrl: Opening a url
///   </li>
///   <li>
///     gotoDeeplink: Opening a custom deeplink
///   </li>
///   <li>
///     copy: Copying the provided text
///   </li>
///   <li>
///     custom: Custom handling
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, APCInAppMessageActionType, "InAppMessageActionType", open) {
  APCInAppMessageActionTypeDismiss = 0,
  APCInAppMessageActionTypeGotoUrl = 1,
  APCInAppMessageActionTypeGotoDeeplink = 2,
  APCInAppMessageActionTypeCopy = 3,
  APCInAppMessageActionTypeCustom = 4,
};


/// Interface for handling deeplinks for in-app mesages alerts
SWIFT_PROTOCOL_NAMED("InAppMessageAlertDeeplinkHandler")
@protocol APCInAppMessageAlertDeeplinkHandler
/// Delegate method that will be invoked when a button deeplink action is implemented
/// \param deeplink String that identifies the deeplink
///
- (void)shouldHandleDeeplinkWithDeeplink:(NSString * _Nullable)deeplink;
@end

@class APCInAppMessageButton;
@class APCInAppMessageContent;
@class APCInAppMessageCustomContent;

/// Interface for listening tap events on in-app message alerts
SWIFT_PROTOCOL_NAMED("InAppMessageAlertTapListener")
@protocol APCInAppMessageAlertTapListener
@optional
/// Delegate method that will be invoked when a custom handled alert button tapped on in-app message alert
/// \param button Button that is tapped
///
/// \param content Related in-app message content
///
- (void)didTapAlertWithButton:(APCInAppMessageButton * _Nonnull)button content:(APCInAppMessageContent * _Nonnull)content;
/// Delegate method that will be invoked when a custom handled button tapped on custom in-app
/// \param button Button that is tapped
///
/// \param content Related in-app message content
///
- (void)didTapCustomButtonWithButton:(APCInAppMessageButton * _Nonnull)button content:(APCInAppMessageCustomContent * _Nonnull)content;
@end


SWIFT_CLASS_NAMED("InAppMessageAttributeCondition")
@interface APCInAppMessageAttributeCondition : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull values;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("InAppMessageButton")
@interface APCInAppMessageButton : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable actionURI;
@property (nonatomic, readonly, copy) NSString * _Nullable buttonId;
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable textToCopy;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("InAppMessageContent")
@interface APCInAppMessageContent : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable text;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, copy) NSString * _Nullable language;
@property (nonatomic, readonly, copy) NSArray<APCInAppMessageButton *> * _Nullable buttons;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum APCInAppMessageLocation : NSInteger;

SWIFT_CLASS_NAMED("InAppMessageCustomContent")
@interface APCInAppMessageCustomContent : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull language;
@property (nonatomic, readonly) enum APCInAppMessageLocation location;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM_NAMED(NSInteger, APCInAppMessageDisplayFrequency, "InAppMessageDisplayFrequency", open) {
  APCInAppMessageDisplayFrequencyOncePerEvent = 0,
  APCInAppMessageDisplayFrequencyOncePerSession = 1,
  APCInAppMessageDisplayFrequencyEveryTime = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, APCInAppMessageHorizontalLocation, "InAppMessageHorizontalLocation", open) {
  APCInAppMessageHorizontalLocationRight = 0,
  APCInAppMessageHorizontalLocationCenter = 1,
  APCInAppMessageHorizontalLocationLeft = 2,
};


/// Interface for the objects that listen received in-app messages
SWIFT_PROTOCOL_NAMED("InAppMessageListener")
@protocol APCInAppMessageListener
@optional
/// Delegate method that will be invoked when in-app message received
/// \param content Content of the in-app message
///
- (void)didReceiveInAppMessageWithContent:(APCInAppMessageContent * _Nonnull)content;
/// Delegate method that will be invoked when custom in-app message received
/// \param content Content of the custom in-app message
///
- (void)didReceiveCustomInAppMessageWithContent:(APCInAppMessageCustomContent * _Nonnull)content;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, APCInAppMessageLocation, "InAppMessageLocation", open) {
  APCInAppMessageLocationTop = 0,
  APCInAppMessageLocationBottom = 1,
  APCInAppMessageLocationFullScreen = 2,
};

@class APCPushEvent;

SWIFT_CLASS_NAMED("InboxMessage")
@interface APCInboxMessage : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) int64_t invalidMessageId;)
+ (int64_t)invalidMessageId SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) int64_t id;
@property (nonatomic, readonly) enum APCInboxMessageType type;
@property (nonatomic, readonly, copy) NSDate * _Nullable receivedDate;
@property (nonatomic, readonly, copy) NSDate * _Nullable expirationDate;
@property (nonatomic, readonly, copy) NSString * _Nullable customerId;
@property (nonatomic, readonly) enum APCInboxMessageStatus status;
@property (nonatomic, readonly, strong) APCPushEvent * _Nullable pushEvent;
@property (nonatomic, readonly, copy) NSString * _Nullable payload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, APCInboxMessageStatus, "InboxMessageStatus", open) {
  APCInboxMessageStatusUnread = 0,
  APCInboxMessageStatusRead = 1,
  APCInboxMessageStatusDismissed = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, APCInboxMessageType, "InboxMessageType", open) {
  APCInboxMessageTypePush = 0,
  APCInboxMessageTypeInApp = 1,
  APCInboxMessageTypeGeofence = 2,
  APCInboxMessageTypeActionBased = 3,
};


SWIFT_CLASS("_TtC10AppConnect15LocationFetcher")
@interface LocationFetcher : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class CLLocationManager;
@class CLLocation;

@interface LocationFetcher (SWIFT_EXTENSION(AppConnect)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
@end

enum APCLoggerLevel : NSUInteger;

SWIFT_CLASS_NAMED("LoggerConfig")
@interface APCLoggerConfig : NSObject
@property (nonatomic) enum APCLoggerLevel logLevel;
@property (nonatomic) BOOL writeToFile;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, APCLoggerLevel, "LoggerLevel", open) {
  APCLoggerLevelNone = 0,
  APCLoggerLevelError = 1,
  APCLoggerLevelWarning = 2,
  APCLoggerLevelInfo = 3,
  APCLoggerLevelDebug = 4,
  APCLoggerLevelVerbose = 5,
};


SWIFT_CLASS_NAMED("LongPressTrackingAttributes")
@interface APCLongPressTrackingAttributes : APCTapTrackingAttributes
- (nonnull instancetype)initWithTouchPoint:(APCTouchPoint * _Nonnull)touchPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, APCModuleTag, "ModuleTag", open) {
  APCModuleTagActionBased = 0,
  APCModuleTagAnalytics = 1,
  APCModuleTagApm = 2,
  APCModuleTagAppInbox = 3,
  APCModuleTagBackoff = 4,
  APCModuleTagCore = 5,
  APCModuleTagDb = 6,
  APCModuleTagDeeplink = 7,
  APCModuleTagEventLimit = 8,
  APCModuleTagEvent = 9,
  APCModuleTagGoal = 10,
  APCModuleTagInApp = 11,
  APCModuleTagRemoteConfig = 12,
  APCModuleTagScreenTracking = 13,
  APCModuleTagSuperAttribute = 14,
  APCModuleTagGeolocation = 15,
  APCModuleTagSnapshot = 16,
  APCModuleTagGeofence = 17,
};







/// Action type enum for notification actions
/// <ul>
///   <li>
///     none: No action
///   </li>
///   <li>
///     openApp: Opening the application
///   </li>
///   <li>
///     gotoUrl: Opening a url
///   </li>
///   <li>
///     gotoDeeplink: Opening a custom deeplink
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, APCNotificationActionType, "NotificationActionType", open) {
  APCNotificationActionTypeNone = 0,
  APCNotificationActionTypeOpenApp = 1,
  APCNotificationActionTypeGotoUrl = 2,
  APCNotificationActionTypeGotoDeeplink = 3,
};



/// Product model for commerce events
SWIFT_CLASS_NAMED("Product")
@interface APCProduct : NSObject
/// Product identifier
@property (nonatomic, copy) NSString * _Nonnull id;
/// Product name
@property (nonatomic, copy) NSString * _Nonnull name;
/// Product’s description
@property (nonatomic, copy) NSString * _Nullable productDescription;
/// Brand of product
@property (nonatomic, copy) NSString * _Nullable brand;
/// Product quantity
@property (nonatomic) NSInteger quantity;
/// Price of product
@property (nonatomic) NSDecimal price;
/// Variant of product
@property (nonatomic, copy) NSString * _Nullable variant;
/// Product category
@property (nonatomic, copy) NSString * _Nullable category;
/// Currency for product’s price
@property (nonatomic, copy) NSString * _Nonnull currency;
- (nullable instancetype)initWithId:(NSString * _Nonnull)id name:(NSString * _Nonnull)name quantity:(NSInteger)quantity price:(NSDecimal)price currency:(NSString * _Nonnull)currency OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Event attributes for event that user completes a purchase.
/// Trigger this event when user completes a purchase.
/// Implementing a Purchase event allows you to see your revenue in real-time,
/// understand how many users are making purchases,
/// see which items are most popular,
/// and track plenty of other important purchase-related metrics.
SWIFT_CLASS_NAMED("PurchaseEventAttributes")
@interface APCPurchaseEventAttributes : APCAttributes
/// Initializes a purchase event’s builder
/// \param currency Currency used in that purchase action
///
/// \param value Value of cart at purchase action
///
/// \param products Products are purchased
///
/// \param success Result of purchase action
///
/// \param domain Domain for multiple instances
///
- (nonnull instancetype)initWithCurrency:(NSString * _Nonnull)currency value:(NSDecimal)value products:(NSArray<APCProduct *> * _Nullable)products success:(BOOL)success domain:(NSString * _Nullable)domain;
/// Add tax value attribute to event
/// \param tax Tax applied at purchase
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addTax:(NSDecimal)tax;
/// Adds ship attribute to event
/// \param ship Ship of purchase
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addShip:(NSDecimal)ship;
/// Adds discount value attribute to event
/// \param discount Discount applied at purchase
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addDiscount:(NSDecimal)discount;
/// Adds coupon attribute to event
/// \param coupon Coupon that used at the purchase action
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addCoupon:(NSString * _Nonnull)coupon;
/// Adds transaction referance attribute to event
/// \param trxId Transaction referance
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addTrxId:(NSString * _Nonnull)trxId;
/// Adds payment method attribute to event
/// \param paymentMethod Payment method used at purchase
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addPaymentMethod:(NSString * _Nonnull)paymentMethod;
/// Adds quantity attribute to event
/// \param quantity Quantity of items are purchased
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addQuantity:(NSInteger)quantity;
/// Adds error code attribute to event
/// \param errorCode Error code obtained from purchase action
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addErrorCode:(NSString * _Nonnull)errorCode;
/// Adds error message attribute to event
/// \param errorMessage Error message obtained from purchase action
///
///
/// returns:
/// Event builder’s itself
- (APCPurchaseEventAttributes * _Nonnull)addErrorMessage:(NSString * _Nonnull)errorMessage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("PushEvent")
@interface APCPushEvent : NSObject
@property (nonatomic, readonly) enum APCNotificationActionType notificationAction;
@property (nonatomic, readonly, copy) NSString * _Nullable soundName;
@property (nonatomic, readonly, copy) NSString * _Nullable pushID;
@property (nonatomic, readonly, copy) NSString * _Nullable scheduleID;
@property (nonatomic, readonly, copy) NSString * _Nullable eventID;
@property (nonatomic, readonly, copy) NSURL * _Nullable mediaURL;
@property (nonatomic, readonly, copy) NSURL * _Nullable targetURL;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable attributes;
@property (nonatomic, readonly, copy) NSString * _Nullable conversionRules;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_CLASS_NAMED("PushEventManager")
@interface APCPushEventManager : NSObject
@property (nonatomic, readonly, strong) APCPushEvent * _Nullable latestPushEvent;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Attributes for that removing item from cart.
/// Trigger this event when user removes item(s) from cart.
/// Implementing a Remove from Cart event allows you to understand how many users remove item(s)
/// from cart and what items are tend to be abandoned through checkout process.
SWIFT_CLASS_NAMED("RemoveFromCartEventAttributes")
@interface APCRemoveFromCartEventAttributes : APCAttributes
/// Initializes remove from cart event attributes with given product
/// \param product Product that added to wish list
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithProduct:(APCProduct * _Nonnull)product domain:(NSString * _Nullable)domain;
/// Adds a value attribute to event
/// \param value Value of product
///
///
/// returns:
/// Event builder’s itself
- (APCRemoveFromCartEventAttributes * _Nonnull)addValue:(NSDecimal)value;
/// Adds total cart value attribute to event
/// \param totalCartValue Total cart value
///
///
/// returns:
/// Event builder’s itself
- (APCRemoveFromCartEventAttributes * _Nonnull)addTotalCartValue:(NSDecimal)totalCartValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("RemoveFromWishListEventAttributes")
@interface APCRemoveFromWishListEventAttributes : APCAttributes
/// Initializes remove from wish list attributes with given product
/// \param product Product that added to wish list
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithProduct:(APCProduct * _Nonnull)product domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class APCViewTrackingExtras;

/// Interface for screen tracking related operations
SWIFT_PROTOCOL_NAMED("ScreenTracker")
@protocol APCScreenTracker
/// Starts auto screen tracking
- (void)startAutoTracking;
/// Stops auto screen tracking activity
- (void)stopAutoTracking;
/// Starts tracking for view
/// \param view View that will be tracked
///
/// \param name Tracking name for the view
///
- (void)startTrackingWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name;
/// Starts tracking for view
/// \param view View that will be tracked
///
/// \param name Tracking name for the view
///
/// \param extras Extra attributes for tracking event
///
- (void)startTrackingWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name extras:(APCViewTrackingExtras * _Nullable)extras;
/// Starts tracking for view
/// \param viewClass ViewClass that will be tracked view’s class
///
/// \param name Tracking name for the view
///
- (void)startTrackingWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name;
/// Starts tracking for view
/// \param viewClass ViewClass that will be tracked view’s class
///
/// \param name Tracking name for the view
///
/// \param extras Extra attributes for tracking event
///
- (void)startTrackingWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name extras:(APCViewTrackingExtras * _Nullable)extras;
/// Stops tracking for view
/// \param view View that is being tracked
///
/// \param name Tracking name for the view
///
- (void)stopTrackingWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name;
/// Stops tracking for view
/// \param view View that is being tracked
///
/// \param name Tracking name for the view
///
/// \param extras Extra attributes for tracking event
///
- (void)stopTrackingWithView:(id <NSObject> _Nonnull)view name:(NSString * _Nonnull)name extras:(APCViewTrackingExtras * _Nullable)extras;
/// Stops tracking for view
/// \param viewClass ViewClass that will be tracked view’s class
///
/// \param name Tracking name for the view
///
- (void)stopTrackingWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name;
/// Stops tracking for view
/// \param viewClass ViewClass that will be tracked view’s class
///
/// \param name Tracking name for the view
///
/// \param extras Extra attributes for tracking event
///
- (void)stopTrackingWithViewClass:(NSString * _Nonnull)viewClass name:(NSString * _Nonnull)name extras:(APCViewTrackingExtras * _Nullable)extras;
@end


/// Event attributes for event that search action,
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS_NAMED("SearchEventAttributes")
@interface APCSearchEventAttributes : APCAttributes
- (nonnull instancetype)initWithQuery:(NSString * _Nonnull)query domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Event builder for event that search action,
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS("_TtC10AppConnect18SearchEventBuilder")
@interface SearchEventBuilder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Event attributes for event that search action,
/// Advised to be triggered upon a successful (or not) search attempt.
SWIFT_CLASS_NAMED("StartCheckoutEventAttributes")
@interface APCStartCheckoutEventAttributes : APCAttributes
/// Initializes an event object with required parameters
/// \param value Value of cart at checkout step
///
/// \param currency Currency of value
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithValue:(NSDecimal)value currency:(NSString * _Nonnull)currency domain:(NSString * _Nullable)domain;
/// Adds quantity attribute to event
/// \param quantity Quantity of checkout items
///
///
/// returns:
/// Event builder’s itself
- (APCStartCheckoutEventAttributes * _Nonnull)addQuantity:(NSInteger)quantity;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("SwipeTrackingAttributes")
@interface APCSwipeTrackingAttributes : APCUIEventTrackingAttributes
/// Initialize SwipeTrackingAttributes
/// \param startPoint startPoint
///
/// \param endPoint endPoint
///
/// \param viewLabel viewLabel for touch’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for touch’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithStartPoint:(CGPoint)startPoint endPoint:(CGPoint)endPoint viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end

@class UISwitch;

SWIFT_CLASS_NAMED("SwitchButtonTrackingAttributes")
@interface APCSwitchButtonTrackingAttributes : APCUIEventTrackingAttributes
/// Initialize SwitchButtonTrackingAttributes
/// \param button switchButton to track
///
- (nonnull instancetype)initWithSwitchButton:(UISwitch * _Nonnull)switchButton OBJC_DESIGNATED_INITIALIZER;
/// Initialize SwitchButtonTrackingAttributes
/// \param className className for button (e.g. “UISwitch”)
///
/// \param isChecked isChecked for button (e.g. button.isOn)
///
/// \param accessibilityLabel accessibilityLabel for button
///
/// \param componentId componentId for button
///
/// \param coordinates coordinates for button. (e.g. button.frame)
///
/// \param viewLabel viewLabel for button’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for button’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithClassName:(NSString * _Nonnull)className isChecked:(BOOL)isChecked accessibilityLabel:(NSString * _Nullable)accessibilityLabel componentId:(NSString * _Nullable)componentId coordinates:(APCUIViewPixelCoordinate * _Nullable)coordinates viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end


@class UITextField;

SWIFT_CLASS_NAMED("TextFieldTrackingAttributes")
@interface APCTextFieldTrackingAttributes : APCUIEventTrackingAttributes
/// Initialize TextFieldTrackingAttributes
/// \param textField textField to track
///
- (nonnull instancetype)initWithTextField:(UITextField * _Nonnull)textField OBJC_DESIGNATED_INITIALIZER;
/// Initialize TextFieldTrackingAttributes
/// \param className className for textField (e.g. “UITextField”)
///
/// \param value value for textField
///
/// \param placeholder placeholder for textField
///
/// \param accessibilityLabel accessibilityLabel for textField
///
/// \param componentId componentId for textField
///
/// \param coordinates coordinates for textField. (e.g. textField.frame)
///
/// \param viewLabel viewLabel for textField’s container view (e.g. “HomePage”)
///
/// \param viewClass viewClass for textField’s container view (e.g. “HomeViewController”)
///
- (nonnull instancetype)initWithClassName:(NSString * _Nonnull)className value:(NSString * _Nonnull)value placeholder:(NSString * _Nullable)placeholder accessibilityLabel:(NSString * _Nullable)accessibilityLabel componentId:(NSString * _Nullable)componentId coordinates:(APCUIViewPixelCoordinate * _Nullable)coordinates viewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithViewLabel:(NSString * _Nullable)viewLabel viewClass:(NSString * _Nullable)viewClass SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("TouchPoint")
@interface APCTouchPoint : NSObject
- (nonnull instancetype)initWithPoint:(CGPoint)point OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface UIBarButtonItem (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) BOOL apc_isDebounceThresholdExclusion;
@end


@interface UIBarButtonItem (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) BOOL apc_containsSensitiveObject;
@end


@interface UIButton (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) BOOL apc_containsSensitiveObject;
@end


@interface UIButton (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) BOOL apc_isDebounceThresholdExclusion;
@end



@interface APCUIEventTrackingAttributes (SWIFT_EXTENSION(AppConnect))
- (void)collectWithDomain:(NSString * _Nullable)domain;
@end



@interface UISwitch (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) BOOL apc_containsSensitiveObject;
@end


@interface UITextField (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) BOOL apc_containsSensitiveObject;
@end



@interface UITextView (SWIFT_EXTENSION(AppConnect))
@property (nonatomic) BOOL apc_containsSensitiveObject;
@end







SWIFT_CLASS_NAMED("UIViewPixelCoordinate")
@interface APCUIViewPixelCoordinate : NSObject
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface APCUIViewPixelCoordinate (SWIFT_EXTENSION(AppConnect))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end






@interface UNNotificationContent (SWIFT_EXTENSION(AppConnect))
/// Checks if the payload belongs to Dataroid
@property (nonatomic, readonly) BOOL isFromConnect;
/// Checks if the given sdk key matches with push notification payload
- (BOOL)isMatchesWith:(NSString * _Nonnull)sdkKey SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("UserAttributes")
@interface APCUserAttributes : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull collections;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface APCUserAttributes (SWIFT_EXTENSION(AppConnect))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
@end


@class UNMutableNotificationContent;

SWIFT_CLASS("_TtC10AppConnect26UserNotificationIntegrator")
@interface UserNotificationIntegrator : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull languageCode;
@property (nonatomic, readonly, strong) APCAppInbox * _Nullable inbox;
+ (UserNotificationIntegrator * _Nullable)initializeWithConfig:(AppConnectConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
- (void)processWithContent:(UNMutableNotificationContent * _Nonnull)content completion:(void (^ _Nonnull)(UNMutableNotificationContent * _Nonnull))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






/// Event attributes for event that user lists items within a specific category.
SWIFT_CLASS_NAMED("ViewCategoryEventAttributes")
@interface APCViewCategoryEventAttributes : APCAttributes
/// Initializes an attribute that user lists items within a specific category.
/// \param category Category of listed items by user
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Event attributes for event that whenever a single product is displayed.
SWIFT_CLASS_NAMED("ViewProductEventAttributes")
@interface APCViewProductEventAttributes : APCAttributes
/// Initializes view product attributes with given product
/// \param product Product that added to wish list
///
/// \param domain Domain name for multiple instances
///
- (nonnull instancetype)initWithProduct:(APCProduct * _Nonnull)product domain:(NSString * _Nullable)domain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ViewTrackingExtras")
@interface APCViewTrackingExtras : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface APCViewTrackingExtras (SWIFT_EXTENSION(AppConnect))
- (nonnull instancetype)addStringArray:(NSArray<NSString *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addIntArray:(NSArray<NSNumber *> * _Nonnull)value forKey:(NSString * _Nonnull)name;
@end


@interface APCViewTrackingExtras (SWIFT_EXTENSION(AppConnect))
- (nonnull instancetype)addInt:(NSInteger)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDouble:(double)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addFloat:(float)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addBool:(BOOL)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addString:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDate:(NSDate * _Nonnull)value forKey:(NSString * _Nonnull)name;
- (nonnull instancetype)addDecimal:(NSDecimal)value forKey:(NSString * _Nonnull)name;
@end


#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
